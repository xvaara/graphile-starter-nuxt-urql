import type * as VueCompositionApi from 'vue'
import * as VueApolloComposable from '@vue/apollo-composable'
/* WARNING: This file is automatically generated. Do not edit. */
import gql from 'graphql-tag'

export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never }
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never }
export type ReactiveFunction<TParam> = () => TParam
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: { input: string, output: string }
  String: { input: string, output: string }
  Boolean: { input: boolean, output: boolean }
  Int: { input: number, output: number }
  Float: { input: number, output: number }
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: { input: any, output: any }
  /**
   * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
   * 3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
   * that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
   * to unexpected results.
   */
  Datetime: { input: string, output: string }
  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */
  UUID: { input: any, output: any }
}

/** All input for the `acceptInvitationToOrganization` mutation. */
export interface AcceptInvitationToOrganizationInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly code?: InputMaybe<Scalars['String']['input']>
  readonly invitationId: Scalars['UUID']['input']
}

/** The output of our `acceptInvitationToOrganization` mutation. */
export interface AcceptInvitationToOrganizationPayload {
  readonly __typename?: 'AcceptInvitationToOrganizationPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

/** All input for the `changePassword` mutation. */
export interface ChangePasswordInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly newPassword: Scalars['String']['input']
  readonly oldPassword: Scalars['String']['input']
}

/** The output of our `changePassword` mutation. */
export interface ChangePasswordPayload {
  readonly __typename?: 'ChangePasswordPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  readonly success: Maybe<Scalars['Boolean']['output']>
}

/** All input for the `confirmAccountDeletion` mutation. */
export interface ConfirmAccountDeletionInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly token: Scalars['String']['input']
}

/** The output of our `confirmAccountDeletion` mutation. */
export interface ConfirmAccountDeletionPayload {
  readonly __typename?: 'ConfirmAccountDeletionPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  readonly success: Maybe<Scalars['Boolean']['output']>
}

/** All input for the `createOrganization` mutation. */
export interface CreateOrganizationInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly name: Scalars['String']['input']
  readonly slug: Scalars['String']['input']
}

/** The output of our `createOrganization` mutation. */
export interface CreateOrganizationPayload {
  readonly __typename?: 'CreateOrganizationPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  readonly organization: Maybe<Organization>
  /** An edge for our `Organization`. May be used by Relay 1. */
  readonly organizationEdge: Maybe<OrganizationsEdge>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

/** The output of our `createOrganization` mutation. */
export interface CreateOrganizationPayloadOrganizationEdgeArgs {
  orderBy?: ReadonlyArray<OrganizationsOrderBy>
}

/** All input for the create `UserEmail` mutation. */
export interface CreateUserEmailInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  /** The `UserEmail` to be created by this mutation. */
  readonly userEmail: UserEmailInput
}

/** The output of our create `UserEmail` mutation. */
export interface CreateUserEmailPayload {
  readonly __typename?: 'CreateUserEmailPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  /** Reads a single `User` that is related to this `UserEmail`. */
  readonly user: Maybe<User>
  /** The `UserEmail` that was created by this mutation. */
  readonly userEmail: Maybe<UserEmail>
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  readonly userEmailEdge: Maybe<UserEmailsEdge>
}

/** The output of our create `UserEmail` mutation. */
export interface CreateUserEmailPayloadUserEmailEdgeArgs {
  orderBy?: ReadonlyArray<UserEmailsOrderBy>
}

/** All input for the `deleteOrganization` mutation. */
export interface DeleteOrganizationInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly organizationId: Scalars['UUID']['input']
}

/** The output of our `deleteOrganization` mutation. */
export interface DeleteOrganizationPayload {
  readonly __typename?: 'DeleteOrganizationPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

/** All input for the `deleteUserAuthentication` mutation. */
export interface DeleteUserAuthenticationInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly id: Scalars['UUID']['input']
}

/** The output of our delete `UserAuthentication` mutation. */
export interface DeleteUserAuthenticationPayload {
  readonly __typename?: 'DeleteUserAuthenticationPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  /** Reads a single `User` that is related to this `UserAuthentication`. */
  readonly user: Maybe<User>
  /** The `UserAuthentication` that was deleted by this mutation. */
  readonly userAuthentication: Maybe<UserAuthentication>
}

/** All input for the `deleteUserEmail` mutation. */
export interface DeleteUserEmailInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly id: Scalars['UUID']['input']
}

/** The output of our delete `UserEmail` mutation. */
export interface DeleteUserEmailPayload {
  readonly __typename?: 'DeleteUserEmailPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  /** Reads a single `User` that is related to this `UserEmail`. */
  readonly user: Maybe<User>
  /** The `UserEmail` that was deleted by this mutation. */
  readonly userEmail: Maybe<UserEmail>
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  readonly userEmailEdge: Maybe<UserEmailsEdge>
}

/** The output of our delete `UserEmail` mutation. */
export interface DeleteUserEmailPayloadUserEmailEdgeArgs {
  orderBy?: ReadonlyArray<UserEmailsOrderBy>
}

/** All input for the `forgotPassword` mutation. */
export interface ForgotPasswordInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly email: Scalars['String']['input']
}

/** The output of our `forgotPassword` mutation. */
export interface ForgotPasswordPayload {
  readonly __typename?: 'ForgotPasswordPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

/** All input for the `inviteToOrganization` mutation. */
export interface InviteToOrganizationInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly email?: InputMaybe<Scalars['String']['input']>
  readonly organizationId: Scalars['UUID']['input']
  readonly username?: InputMaybe<Scalars['String']['input']>
}

/** The output of our `inviteToOrganization` mutation. */
export interface InviteToOrganizationPayload {
  readonly __typename?: 'InviteToOrganizationPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

export interface LoginInput {
  readonly password: Scalars['String']['input']
  readonly username: Scalars['String']['input']
}

export interface LoginPayload {
  readonly __typename?: 'LoginPayload'
  readonly user: User
}

export interface LogoutPayload {
  readonly __typename?: 'LogoutPayload'
  readonly success: Maybe<Scalars['Boolean']['output']>
}

/** All input for the `makeEmailPrimary` mutation. */
export interface MakeEmailPrimaryInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly emailId: Scalars['UUID']['input']
}

/** The output of our `makeEmailPrimary` mutation. */
export interface MakeEmailPrimaryPayload {
  readonly __typename?: 'MakeEmailPrimaryPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  /** Reads a single `User` that is related to this `UserEmail`. */
  readonly user: Maybe<User>
  readonly userEmail: Maybe<UserEmail>
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  readonly userEmailEdge: Maybe<UserEmailsEdge>
}

/** The output of our `makeEmailPrimary` mutation. */
export interface MakeEmailPrimaryPayloadUserEmailEdgeArgs {
  orderBy?: ReadonlyArray<UserEmailsOrderBy>
}

/** The root mutation type which contains root level fields which mutate data. */
export interface Mutation {
  readonly __typename?: 'Mutation'
  /** If someone invited you by your email address then you must include the code that was emailed to you, otherwise you may accept the invitation directly using the UUID. If successful, you will be a member of the organization. */
  readonly acceptInvitationToOrganization: Maybe<AcceptInvitationToOrganizationPayload>
  /** Enter your old password and a new password to change your password. */
  readonly changePassword: Maybe<ChangePasswordPayload>
  /** If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion. */
  readonly confirmAccountDeletion: Maybe<ConfirmAccountDeletionPayload>
  /** An `Organization` is a great way of sharing access to resources between multiple users without compromising security. When you create an organization you will have the 'owner' and 'billing contact' roles. You may invite other users and redistribute these roles. */
  readonly createOrganization: Maybe<CreateOrganizationPayload>
  /** Creates a single `UserEmail`. */
  readonly createUserEmail: Maybe<CreateUserEmailPayload>
  /** Only the 'owner' may delete an organization. This operation cannot be undone, so be sure that it is what you intend. */
  readonly deleteOrganization: Maybe<DeleteOrganizationPayload>
  /** Deletes a single `UserAuthentication` using a unique key. */
  readonly deleteUserAuthentication: Maybe<DeleteUserAuthenticationPayload>
  /** Deletes a single `UserEmail` using a unique key. */
  readonly deleteUserEmail: Maybe<DeleteUserEmailPayload>
  /** If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address! */
  readonly forgotPassword: Maybe<ForgotPasswordPayload>
  /** You may invite a user to your organization either by their username (only for verified users) or by their email. If you opt to invite by email then an email will be sent to this person containing a code that they need to accept the invitation. If the person doesn't already have an account they will be instructed to create one; their account need not have the email address that you invited listed as the secret code is confirmation enough. */
  readonly inviteToOrganization: Maybe<InviteToOrganizationPayload>
  /** Use this mutation to log in to your account; this login uses sessions so you do not need to take further action. */
  readonly login: Maybe<LoginPayload>
  /** Use this mutation to logout from your account. Don't forget to clear the client state! */
  readonly logout: Maybe<LogoutPayload>
  /** Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address. */
  readonly makeEmailPrimary: Maybe<MakeEmailPrimaryPayload>
  /** Use this mutation to create an account on our system. This may only be used if you are logged out. */
  readonly register: Maybe<RegisterPayload>
  /** The owner of an `Organization` may remove an `OrganizationMember` with this mutation. */
  readonly removeFromOrganization: Maybe<RemoveFromOrganizationPayload>
  /** Begin the account deletion flow by requesting the confirmation email */
  readonly requestAccountDeletion: Maybe<RequestAccountDeletionPayload>
  /** If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently. */
  readonly resendEmailVerificationCode: Maybe<ResendEmailVerificationCodePayload>
  /** After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password. */
  readonly resetPassword: Maybe<ResetPasswordPayload>
  /** The owner of an `Organization` may use this mutation to make any organization member the billing contact. */
  readonly transferOrganizationBillingContact: Maybe<TransferOrganizationBillingContactPayload>
  /** The owner of an `Organization` may use this mutation to transfer ownership to a different organization member. Take care, if you assign ownership to someone who cannot or will not access their account then you may need to contact support to have ownership reassigned. */
  readonly transferOrganizationOwnership: Maybe<TransferOrganizationOwnershipPayload>
  /** Updates a single `Organization` using a unique key and a patch. */
  readonly updateOrganization: Maybe<UpdateOrganizationPayload>
  /** Updates a single `User` using a unique key and a patch. */
  readonly updateUser: Maybe<UpdateUserPayload>
  /** Once you have received a verification token for your email, you may call this mutation with that token to make your email verified. */
  readonly verifyEmail: Maybe<VerifyEmailPayload>
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationAcceptInvitationToOrganizationArgs {
  input: AcceptInvitationToOrganizationInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationChangePasswordArgs {
  input: ChangePasswordInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationConfirmAccountDeletionArgs {
  input: ConfirmAccountDeletionInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationCreateOrganizationArgs {
  input: CreateOrganizationInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationCreateUserEmailArgs {
  input: CreateUserEmailInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationDeleteOrganizationArgs {
  input: DeleteOrganizationInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationDeleteUserAuthenticationArgs {
  input: DeleteUserAuthenticationInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationDeleteUserEmailArgs {
  input: DeleteUserEmailInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationForgotPasswordArgs {
  input: ForgotPasswordInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationInviteToOrganizationArgs {
  input: InviteToOrganizationInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationLoginArgs {
  input: LoginInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationMakeEmailPrimaryArgs {
  input: MakeEmailPrimaryInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationRegisterArgs {
  input: RegisterInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationRemoveFromOrganizationArgs {
  input: RemoveFromOrganizationInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationRequestAccountDeletionArgs {
  input: RequestAccountDeletionInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationResendEmailVerificationCodeArgs {
  input: ResendEmailVerificationCodeInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationResetPasswordArgs {
  input: ResetPasswordInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationTransferOrganizationBillingContactArgs {
  input: TransferOrganizationBillingContactInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationTransferOrganizationOwnershipArgs {
  input: TransferOrganizationOwnershipInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationUpdateOrganizationArgs {
  input: UpdateOrganizationInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationUpdateUserArgs {
  input: UpdateUserInput
}

/** The root mutation type which contains root level fields which mutate data. */
export interface MutationVerifyEmailArgs {
  input: VerifyEmailInput
}

export interface Organization {
  readonly __typename?: 'Organization'
  readonly createdAt: Scalars['Datetime']['output']
  readonly currentUserIsBillingContact: Maybe<Scalars['Boolean']['output']>
  readonly currentUserIsOwner: Maybe<Scalars['Boolean']['output']>
  readonly id: Scalars['UUID']['output']
  readonly name: Scalars['String']['output']
  /** Reads and enables pagination through a set of `OrganizationMembership`. */
  readonly organizationMemberships: OrganizationMembershipsConnection
  readonly slug: Scalars['String']['output']
}

export interface OrganizationOrganizationMembershipsArgs {
  after?: InputMaybe<Scalars['Cursor']['input']>
  before?: InputMaybe<Scalars['Cursor']['input']>
  condition?: InputMaybe<OrganizationMembershipCondition>
  first?: InputMaybe<Scalars['Int']['input']>
  last?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<ReadonlyArray<OrganizationMembershipsOrderBy>>
}

/**
 * A condition to be used against `Organization` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export interface OrganizationCondition {
  /** Checks for equality with the object’s `id` field. */
  readonly id?: InputMaybe<Scalars['UUID']['input']>
  /** Checks for equality with the object’s `slug` field. */
  readonly slug?: InputMaybe<Scalars['String']['input']>
}

export interface OrganizationMembership {
  readonly __typename?: 'OrganizationMembership'
  readonly createdAt: Scalars['Datetime']['output']
  readonly id: Scalars['UUID']['output']
  readonly isBillingContact: Scalars['Boolean']['output']
  readonly isOwner: Scalars['Boolean']['output']
  /** Reads a single `Organization` that is related to this `OrganizationMembership`. */
  readonly organization: Maybe<Organization>
  readonly organizationId: Scalars['UUID']['output']
  /** Reads a single `User` that is related to this `OrganizationMembership`. */
  readonly user: Maybe<User>
  readonly userId: Scalars['UUID']['output']
}

/**
 * A condition to be used against `OrganizationMembership` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export interface OrganizationMembershipCondition {
  /** Checks for equality with the object’s `id` field. */
  readonly id?: InputMaybe<Scalars['UUID']['input']>
  /** Checks for equality with the object’s `organizationId` field. */
  readonly organizationId?: InputMaybe<Scalars['UUID']['input']>
  /** Checks for equality with the object’s `userId` field. */
  readonly userId?: InputMaybe<Scalars['UUID']['input']>
}

/** A connection to a list of `OrganizationMembership` values. */
export interface OrganizationMembershipsConnection {
  readonly __typename?: 'OrganizationMembershipsConnection'
  /** A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<OrganizationMembershipsEdge>
  /** A list of `OrganizationMembership` objects. */
  readonly nodes: ReadonlyArray<OrganizationMembership>
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo
  /** The count of *all* `OrganizationMembership` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output']
}

/** A `OrganizationMembership` edge in the connection. */
export interface OrganizationMembershipsEdge {
  readonly __typename?: 'OrganizationMembershipsEdge'
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>
  /** The `OrganizationMembership` at the end of the edge. */
  readonly node: OrganizationMembership
}

/** Methods to use when ordering `OrganizationMembership`. */
export type OrganizationMembershipsOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'MEMBER_NAME_ASC'
  | 'MEMBER_NAME_DESC'
  | 'NATURAL'
  | 'ORGANIZATION_ID_ASC'
  | 'ORGANIZATION_ID_DESC'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'USER_ID_ASC'
  | 'USER_ID_DESC'

/** Represents an update to a `Organization`. Fields that are set will be updated. */
export interface OrganizationPatch {
  readonly name?: InputMaybe<Scalars['String']['input']>
  readonly slug?: InputMaybe<Scalars['String']['input']>
}

/** A connection to a list of `Organization` values. */
export interface OrganizationsConnection {
  readonly __typename?: 'OrganizationsConnection'
  /** A list of edges which contains the `Organization` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<OrganizationsEdge>
  /** A list of `Organization` objects. */
  readonly nodes: ReadonlyArray<Organization>
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo
  /** The count of *all* `Organization` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output']
}

/** A `Organization` edge in the connection. */
export interface OrganizationsEdge {
  readonly __typename?: 'OrganizationsEdge'
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>
  /** The `Organization` at the end of the edge. */
  readonly node: Organization
}

/** Methods to use when ordering `Organization`. */
export type OrganizationsOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'NATURAL'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'SLUG_ASC'
  | 'SLUG_DESC'

/** Information about pagination in a connection. */
export interface PageInfo {
  readonly __typename?: 'PageInfo'
  /** When paginating forwards, the cursor to continue. */
  readonly endCursor: Maybe<Scalars['Cursor']['output']>
  /** When paginating forwards, are there more items? */
  readonly hasNextPage: Scalars['Boolean']['output']
  /** When paginating backwards, are there more items? */
  readonly hasPreviousPage: Scalars['Boolean']['output']
  /** When paginating backwards, the cursor to continue. */
  readonly startCursor: Maybe<Scalars['Cursor']['output']>
}

/** The root query type which gives access points into the data universe. */
export interface Query {
  readonly __typename?: 'Query'
  /** The currently logged in user (or null if not logged in). */
  readonly currentUser: Maybe<User>
  /** Get a single `Organization`. */
  readonly organization: Maybe<Organization>
  /** Get a single `Organization`. */
  readonly organizationBySlug: Maybe<Organization>
  /** Given an invitation UUID (and, if required, the code that was emailed to you), retrieves the `Organization` that you were invited to. */
  readonly organizationForInvitation: Maybe<Organization>
  /** Get a single `OrganizationMembership`. */
  readonly organizationMembership: Maybe<OrganizationMembership>
  /** Reads and enables pagination through a set of `Organization`. */
  readonly organizations: Maybe<OrganizationsConnection>
  /** Get a single `User`. */
  readonly user: Maybe<User>
  /** Get a single `UserAuthentication`. */
  readonly userAuthentication: Maybe<UserAuthentication>
  /** Get a single `User`. */
  readonly userByUsername: Maybe<User>
  /** Get a single `UserEmail`. */
  readonly userEmail: Maybe<UserEmail>
}

/** The root query type which gives access points into the data universe. */
export interface QueryOrganizationArgs {
  id: Scalars['UUID']['input']
}

/** The root query type which gives access points into the data universe. */
export interface QueryOrganizationBySlugArgs {
  slug: Scalars['String']['input']
}

/** The root query type which gives access points into the data universe. */
export interface QueryOrganizationForInvitationArgs {
  code?: InputMaybe<Scalars['String']['input']>
  invitationId: Scalars['UUID']['input']
}

/** The root query type which gives access points into the data universe. */
export interface QueryOrganizationMembershipArgs {
  id: Scalars['UUID']['input']
}

/** The root query type which gives access points into the data universe. */
export interface QueryOrganizationsArgs {
  after?: InputMaybe<Scalars['Cursor']['input']>
  before?: InputMaybe<Scalars['Cursor']['input']>
  condition?: InputMaybe<OrganizationCondition>
  first?: InputMaybe<Scalars['Int']['input']>
  last?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<ReadonlyArray<OrganizationsOrderBy>>
}

/** The root query type which gives access points into the data universe. */
export interface QueryUserArgs {
  id: Scalars['UUID']['input']
}

/** The root query type which gives access points into the data universe. */
export interface QueryUserAuthenticationArgs {
  id: Scalars['UUID']['input']
}

/** The root query type which gives access points into the data universe. */
export interface QueryUserByUsernameArgs {
  username: Scalars['String']['input']
}

/** The root query type which gives access points into the data universe. */
export interface QueryUserEmailArgs {
  id: Scalars['UUID']['input']
}

export interface RegisterInput {
  readonly avatarUrl?: InputMaybe<Scalars['String']['input']>
  readonly email: Scalars['String']['input']
  readonly name?: InputMaybe<Scalars['String']['input']>
  readonly password: Scalars['String']['input']
  readonly username: Scalars['String']['input']
}

export interface RegisterPayload {
  readonly __typename?: 'RegisterPayload'
  readonly user: User
}

/** All input for the `removeFromOrganization` mutation. */
export interface RemoveFromOrganizationInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly organizationId: Scalars['UUID']['input']
  readonly userId: Scalars['UUID']['input']
}

/** The output of our `removeFromOrganization` mutation. */
export interface RemoveFromOrganizationPayload {
  readonly __typename?: 'RemoveFromOrganizationPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

/** All input for the `requestAccountDeletion` mutation. */
export interface RequestAccountDeletionInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
}

/** The output of our `requestAccountDeletion` mutation. */
export interface RequestAccountDeletionPayload {
  readonly __typename?: 'RequestAccountDeletionPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  readonly success: Maybe<Scalars['Boolean']['output']>
}

/** All input for the `resendEmailVerificationCode` mutation. */
export interface ResendEmailVerificationCodeInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly emailId: Scalars['UUID']['input']
}

/** The output of our `resendEmailVerificationCode` mutation. */
export interface ResendEmailVerificationCodePayload {
  readonly __typename?: 'ResendEmailVerificationCodePayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  readonly success: Maybe<Scalars['Boolean']['output']>
}

/** All input for the `resetPassword` mutation. */
export interface ResetPasswordInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly newPassword: Scalars['String']['input']
  readonly resetToken: Scalars['String']['input']
  readonly userId: Scalars['UUID']['input']
}

/** The output of our `resetPassword` mutation. */
export interface ResetPasswordPayload {
  readonly __typename?: 'ResetPasswordPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  readonly success: Maybe<Scalars['Boolean']['output']>
}

/** The root subscription type: contains realtime events you can subscribe to with the `subscription` operation. */
export interface Subscription {
  readonly __typename?: 'Subscription'
  /** Triggered when the logged in user's record is updated in some way. */
  readonly currentUserUpdated: Maybe<UserSubscriptionPayload>
}

/** All input for the `transferOrganizationBillingContact` mutation. */
export interface TransferOrganizationBillingContactInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly organizationId: Scalars['UUID']['input']
  readonly userId: Scalars['UUID']['input']
}

/** The output of our `transferOrganizationBillingContact` mutation. */
export interface TransferOrganizationBillingContactPayload {
  readonly __typename?: 'TransferOrganizationBillingContactPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  readonly organization: Maybe<Organization>
  /** An edge for our `Organization`. May be used by Relay 1. */
  readonly organizationEdge: Maybe<OrganizationsEdge>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

/** The output of our `transferOrganizationBillingContact` mutation. */
export interface TransferOrganizationBillingContactPayloadOrganizationEdgeArgs {
  orderBy?: ReadonlyArray<OrganizationsOrderBy>
}

/** All input for the `transferOrganizationOwnership` mutation. */
export interface TransferOrganizationOwnershipInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly organizationId: Scalars['UUID']['input']
  readonly userId: Scalars['UUID']['input']
}

/** The output of our `transferOrganizationOwnership` mutation. */
export interface TransferOrganizationOwnershipPayload {
  readonly __typename?: 'TransferOrganizationOwnershipPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  readonly organization: Maybe<Organization>
  /** An edge for our `Organization`. May be used by Relay 1. */
  readonly organizationEdge: Maybe<OrganizationsEdge>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

/** The output of our `transferOrganizationOwnership` mutation. */
export interface TransferOrganizationOwnershipPayloadOrganizationEdgeArgs {
  orderBy?: ReadonlyArray<OrganizationsOrderBy>
}

/** All input for the `updateOrganization` mutation. */
export interface UpdateOrganizationInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly id: Scalars['UUID']['input']
  /** An object where the defined keys will be set on the `Organization` being updated. */
  readonly patch: OrganizationPatch
}

/** The output of our update `Organization` mutation. */
export interface UpdateOrganizationPayload {
  readonly __typename?: 'UpdateOrganizationPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** The `Organization` that was updated by this mutation. */
  readonly organization: Maybe<Organization>
  /** An edge for our `Organization`. May be used by Relay 1. */
  readonly organizationEdge: Maybe<OrganizationsEdge>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
}

/** The output of our update `Organization` mutation. */
export interface UpdateOrganizationPayloadOrganizationEdgeArgs {
  orderBy?: ReadonlyArray<OrganizationsOrderBy>
}

/** All input for the `updateUser` mutation. */
export interface UpdateUserInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  /** Unique identifier for the user. */
  readonly id: Scalars['UUID']['input']
  /** An object where the defined keys will be set on the `User` being updated. */
  readonly patch: UserPatch
}

/** The output of our update `User` mutation. */
export interface UpdateUserPayload {
  readonly __typename?: 'UpdateUserPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  /** The `User` that was updated by this mutation. */
  readonly user: Maybe<User>
  /** An edge for our `User`. May be used by Relay 1. */
  readonly userEdge: Maybe<UsersEdge>
}

/** The output of our update `User` mutation. */
export interface UpdateUserPayloadUserEdgeArgs {
  orderBy?: ReadonlyArray<UsersOrderBy>
}

/** A user who can log in to the application. */
export interface User {
  readonly __typename?: 'User'
  /** Optional avatar URL. */
  readonly avatarUrl: Maybe<Scalars['String']['output']>
  readonly createdAt: Scalars['Datetime']['output']
  readonly hasPassword: Maybe<Scalars['Boolean']['output']>
  /** Unique identifier for the user. */
  readonly id: Scalars['UUID']['output']
  /** If true, the user has elevated privileges. */
  readonly isAdmin: Scalars['Boolean']['output']
  readonly isVerified: Scalars['Boolean']['output']
  /** Public-facing name (or pseudonym) of the user. */
  readonly name: Maybe<Scalars['String']['output']>
  /** Reads and enables pagination through a set of `OrganizationMembership`. */
  readonly organizationMemberships: OrganizationMembershipsConnection
  readonly updatedAt: Scalars['Datetime']['output']
  /** Reads and enables pagination through a set of `UserAuthentication`. */
  readonly userAuthenticationsList: ReadonlyArray<UserAuthentication>
  /** Reads and enables pagination through a set of `UserEmail`. */
  readonly userEmails: UserEmailsConnection
  /** Public-facing username (or 'handle') of the user. */
  readonly username: Scalars['String']['output']
}

/** A user who can log in to the application. */
export interface UserOrganizationMembershipsArgs {
  after?: InputMaybe<Scalars['Cursor']['input']>
  before?: InputMaybe<Scalars['Cursor']['input']>
  condition?: InputMaybe<OrganizationMembershipCondition>
  first?: InputMaybe<Scalars['Int']['input']>
  last?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<ReadonlyArray<OrganizationMembershipsOrderBy>>
}

/** A user who can log in to the application. */
export interface UserUserAuthenticationsListArgs {
  condition?: InputMaybe<UserAuthenticationCondition>
  first?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<ReadonlyArray<UserAuthenticationsOrderBy>>
}

/** A user who can log in to the application. */
export interface UserUserEmailsArgs {
  after?: InputMaybe<Scalars['Cursor']['input']>
  before?: InputMaybe<Scalars['Cursor']['input']>
  condition?: InputMaybe<UserEmailCondition>
  first?: InputMaybe<Scalars['Int']['input']>
  last?: InputMaybe<Scalars['Int']['input']>
  offset?: InputMaybe<Scalars['Int']['input']>
  orderBy?: InputMaybe<ReadonlyArray<UserEmailsOrderBy>>
}

/** Contains information about the login providers this user has used, so that they may disconnect them should they wish. */
export interface UserAuthentication {
  readonly __typename?: 'UserAuthentication'
  readonly createdAt: Scalars['Datetime']['output']
  readonly id: Scalars['UUID']['output']
  /** A unique identifier for the user within the login service. */
  readonly identifier: Scalars['String']['output']
  /** The login service used, e.g. `twitter` or `github`. */
  readonly service: Scalars['String']['output']
  readonly updatedAt: Scalars['Datetime']['output']
  /** Reads a single `User` that is related to this `UserAuthentication`. */
  readonly user: Maybe<User>
  readonly userId: Scalars['UUID']['output']
}

/**
 * A condition to be used against `UserAuthentication` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export interface UserAuthenticationCondition {
  /** Checks for equality with the object’s `id` field. */
  readonly id?: InputMaybe<Scalars['UUID']['input']>
  /** Checks for equality with the object’s `service` field. */
  readonly service?: InputMaybe<Scalars['String']['input']>
  /** Checks for equality with the object’s `userId` field. */
  readonly userId?: InputMaybe<Scalars['UUID']['input']>
}

/** Methods to use when ordering `UserAuthentication`. */
export type UserAuthenticationsOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'NATURAL'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'SERVICE_ASC'
  | 'SERVICE_DESC'
  | 'USER_ID_ASC'
  | 'USER_ID_DESC'

/** Information about a user's email address. */
export interface UserEmail {
  readonly __typename?: 'UserEmail'
  readonly createdAt: Scalars['Datetime']['output']
  /** The users email address, in `a@b.c` format. */
  readonly email: Scalars['String']['output']
  readonly id: Scalars['UUID']['output']
  readonly isPrimary: Scalars['Boolean']['output']
  /** True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise. */
  readonly isVerified: Scalars['Boolean']['output']
  readonly updatedAt: Scalars['Datetime']['output']
  /** Reads a single `User` that is related to this `UserEmail`. */
  readonly user: Maybe<User>
  readonly userId: Scalars['UUID']['output']
}

/**
 * A condition to be used against `UserEmail` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export interface UserEmailCondition {
  /** Checks for equality with the object’s `id` field. */
  readonly id?: InputMaybe<Scalars['UUID']['input']>
  /** Checks for equality with the object’s `isPrimary` field. */
  readonly isPrimary?: InputMaybe<Scalars['Boolean']['input']>
  /** Checks for equality with the object’s `userId` field. */
  readonly userId?: InputMaybe<Scalars['UUID']['input']>
}

/** An input for mutations affecting `UserEmail` */
export interface UserEmailInput {
  /** The users email address, in `a@b.c` format. */
  readonly email: Scalars['String']['input']
}

/** A connection to a list of `UserEmail` values. */
export interface UserEmailsConnection {
  readonly __typename?: 'UserEmailsConnection'
  /** A list of edges which contains the `UserEmail` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<UserEmailsEdge>
  /** A list of `UserEmail` objects. */
  readonly nodes: ReadonlyArray<UserEmail>
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo
  /** The count of *all* `UserEmail` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output']
}

/** A `UserEmail` edge in the connection. */
export interface UserEmailsEdge {
  readonly __typename?: 'UserEmailsEdge'
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>
  /** The `UserEmail` at the end of the edge. */
  readonly node: UserEmail
}

/** Methods to use when ordering `UserEmail`. */
export type UserEmailsOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'IS_PRIMARY_ASC'
  | 'IS_PRIMARY_DESC'
  | 'NATURAL'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'USER_ID_ASC'
  | 'USER_ID_DESC'

/** Represents an update to a `User`. Fields that are set will be updated. */
export interface UserPatch {
  /** Optional avatar URL. */
  readonly avatarUrl?: InputMaybe<Scalars['String']['input']>
  /** Public-facing name (or pseudonym) of the user. */
  readonly name?: InputMaybe<Scalars['String']['input']>
  /** Public-facing username (or 'handle') of the user. */
  readonly username?: InputMaybe<Scalars['String']['input']>
}

export interface UserSubscriptionPayload {
  readonly __typename?: 'UserSubscriptionPayload'
  readonly event: Maybe<Scalars['String']['output']>
  readonly user: Maybe<User>
}

/** A `User` edge in the connection. */
export interface UsersEdge {
  readonly __typename?: 'UsersEdge'
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>
  /** The `User` at the end of the edge. */
  readonly node: User
}

/** Methods to use when ordering `User`. */
export type UsersOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'NATURAL'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'USERNAME_ASC'
  | 'USERNAME_DESC'

/** All input for the `verifyEmail` mutation. */
export interface VerifyEmailInput {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>
  readonly token: Scalars['String']['input']
  readonly userEmailId: Scalars['UUID']['input']
}

/** The output of our `verifyEmail` mutation. */
export interface VerifyEmailPayload {
  readonly __typename?: 'VerifyEmailPayload'
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>
  readonly success: Maybe<Scalars['Boolean']['output']>
}

export type AcceptOrganizationInviteMutationVariables = Exact<{
  id: Scalars['UUID']['input']
  code?: InputMaybe<Scalars['String']['input']>
}>

export interface AcceptOrganizationInviteMutation { readonly __typename?: 'Mutation', readonly acceptInvitationToOrganization: { readonly __typename?: 'AcceptInvitationToOrganizationPayload', readonly clientMutationId: string | null } | null }

export type AddEmailMutationVariables = Exact<{
  email: Scalars['String']['input']
}>

export interface AddEmailMutation { readonly __typename?: 'Mutation', readonly createUserEmail: { readonly __typename?: 'CreateUserEmailPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }> } } | null } | null }

export type ChangePasswordMutationVariables = Exact<{
  oldPassword: Scalars['String']['input']
  newPassword: Scalars['String']['input']
}>

export interface ChangePasswordMutation { readonly __typename?: 'Mutation', readonly changePassword: { readonly __typename?: 'ChangePasswordPayload', readonly success: boolean | null } | null }

export type ConfirmAccountDeletionMutationVariables = Exact<{
  token: Scalars['String']['input']
}>

export interface ConfirmAccountDeletionMutation { readonly __typename?: 'Mutation', readonly confirmAccountDeletion: { readonly __typename?: 'ConfirmAccountDeletionPayload', readonly success: boolean | null } | null }

export interface CreatedOrganizationFragment { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string }

export type CreateOrganizationMutationVariables = Exact<{
  name: Scalars['String']['input']
  slug: Scalars['String']['input']
}>

export interface CreateOrganizationMutation { readonly __typename?: 'Mutation', readonly createOrganization: { readonly __typename?: 'CreateOrganizationPayload', readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null, readonly query: { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null } | null } | null }

export type CurrentUserAuthenticationsQueryVariables = Exact<{ [key: string]: never }>

export interface CurrentUserAuthenticationsQuery { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly authentications: ReadonlyArray<{ readonly __typename?: 'UserAuthentication', readonly id: any, readonly service: string, readonly identifier: string, readonly createdAt: string }> } | null }

export type CurrentUserUpdatedSubscriptionVariables = Exact<{ [key: string]: never }>

export interface CurrentUserUpdatedSubscription { readonly __typename?: 'Subscription', readonly currentUserUpdated: { readonly __typename?: 'UserSubscriptionPayload', readonly event: string | null, readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean } | null } | null }

export type DeleteEmailMutationVariables = Exact<{
  emailId: Scalars['UUID']['input']
}>

export interface DeleteEmailMutation { readonly __typename?: 'Mutation', readonly deleteUserEmail: { readonly __typename?: 'DeleteUserEmailPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }> } } | null } | null }

export type DeleteOrganizationMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input']
}>

export interface DeleteOrganizationMutation { readonly __typename?: 'Mutation', readonly deleteOrganization: { readonly __typename?: 'DeleteOrganizationPayload', readonly clientMutationId: string | null } | null }

export interface EmailsForm_UserFragment { readonly __typename?: 'User', readonly id: any, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }> } }

export interface EmailsForm_UserEmailFragment { readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }

export type ForgotPasswordMutationVariables = Exact<{
  email: Scalars['String']['input']
}>

export interface ForgotPasswordMutation { readonly __typename?: 'Mutation', readonly forgotPassword: { readonly __typename?: 'ForgotPasswordPayload', readonly clientMutationId: string | null } | null }

export type InvitationDetailQueryVariables = Exact<{
  id: Scalars['UUID']['input']
  code?: InputMaybe<Scalars['String']['input']>
}>

export interface InvitationDetailQuery { readonly __typename?: 'Query', readonly organizationForInvitation: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null, readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null }

export type InviteToOrganizationMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input']
  email?: InputMaybe<Scalars['String']['input']>
  username?: InputMaybe<Scalars['String']['input']>
}>

export interface InviteToOrganizationMutation { readonly __typename?: 'Mutation', readonly inviteToOrganization: { readonly __typename?: 'InviteToOrganizationPayload', readonly clientMutationId: string | null } | null }

export type LoginMutationVariables = Exact<{
  username: Scalars['String']['input']
  password: Scalars['String']['input']
}>

export interface LoginMutation { readonly __typename?: 'Mutation', readonly login: { readonly __typename?: 'LoginPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } } | null }

export type LogoutMutationVariables = Exact<{ [key: string]: never }>

export interface LogoutMutation { readonly __typename?: 'Mutation', readonly logout: { readonly __typename?: 'LogoutPayload', readonly success: boolean | null } | null }

export type MakeEmailPrimaryMutationVariables = Exact<{
  emailId: Scalars['UUID']['input']
}>

export interface MakeEmailPrimaryMutation { readonly __typename?: 'Mutation', readonly makeEmailPrimary: { readonly __typename?: 'MakeEmailPrimaryPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly isPrimary: boolean }> } } | null } | null }

export type OrganizationBySlugQueryVariables = Exact<{
  slug: Scalars['String']['input']
}>

export interface OrganizationBySlugQuery { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }

export interface OrganizationMembers_MembershipFragment { readonly __typename?: 'OrganizationMembership', readonly id: any, readonly createdAt: string, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } | null }

export interface OrganizationMembers_OrganizationFragment { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly createdAt: string, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } | null }> } }

export type OrganizationMembersQueryVariables = Exact<{
  slug: Scalars['String']['input']
  offset?: InputMaybe<Scalars['Int']['input']>
}>

export interface OrganizationMembersQuery { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly createdAt: string, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } | null }> } } | null, readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null }

export type OrganizationPageQueryVariables = Exact<{
  slug: Scalars['String']['input']
}>

export interface OrganizationPageQuery { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null } | null, readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null }

export interface OrganizationPage_OrganizationFragment { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null }

export interface OrganizationPage_QueryFragment { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null } | null, readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null }

export interface ProfileSettingsForm_UserFragment { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null }

export type RegisterMutationVariables = Exact<{
  username: Scalars['String']['input']
  password: Scalars['String']['input']
  email: Scalars['String']['input']
  name?: InputMaybe<Scalars['String']['input']>
}>

export interface RegisterMutation { readonly __typename?: 'Mutation', readonly register: { readonly __typename?: 'RegisterPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } } | null }

export type RemoveFromOrganizationMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input']
  userId: Scalars['UUID']['input']
}>

export interface RemoveFromOrganizationMutation { readonly __typename?: 'Mutation', readonly removeFromOrganization: { readonly __typename?: 'RemoveFromOrganizationPayload', readonly clientMutationId: string | null } | null }

export type RequestAccountDeletionMutationVariables = Exact<{ [key: string]: never }>

export interface RequestAccountDeletionMutation { readonly __typename?: 'Mutation', readonly requestAccountDeletion: { readonly __typename?: 'RequestAccountDeletionPayload', readonly success: boolean | null } | null }

export type ResendEmailVerificationMutationVariables = Exact<{
  emailId: Scalars['UUID']['input']
}>

export interface ResendEmailVerificationMutation { readonly __typename?: 'Mutation', readonly resendEmailVerificationCode: { readonly __typename?: 'ResendEmailVerificationCodePayload', readonly success: boolean | null } | null }

export type ResetPasswordMutationVariables = Exact<{
  userId: Scalars['UUID']['input']
  token: Scalars['String']['input']
  password: Scalars['String']['input']
}>

export interface ResetPasswordMutation { readonly __typename?: 'Mutation', readonly resetPassword: { readonly __typename?: 'ResetPasswordPayload', readonly success: boolean | null } | null }

export type SettingsEmailsQueryVariables = Exact<{ [key: string]: never }>

export interface SettingsEmailsQuery { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly isVerified: boolean, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }> }, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null }

export type SettingsPasswordQueryVariables = Exact<{ [key: string]: never }>

export interface SettingsPasswordQuery { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly hasPassword: boolean | null, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string }> } } | null }

export type SettingsProfileQueryVariables = Exact<{ [key: string]: never }>

export interface SettingsProfileQuery { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null }

export type SharedQueryVariables = Exact<{ [key: string]: never }>

export interface SharedQuery { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null }

export interface SharedLayout_QueryFragment { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null }

export interface SharedLayout_UserFragment { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } }

export type TransferOrganizationBillingContactMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input']
  userId: Scalars['UUID']['input']
}>

export interface TransferOrganizationBillingContactMutation { readonly __typename?: 'Mutation', readonly transferOrganizationBillingContact: { readonly __typename?: 'TransferOrganizationBillingContactPayload', readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly currentUserIsBillingContact: boolean | null } | null } | null }

export type TransferOrganizationOwnershipMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input']
  userId: Scalars['UUID']['input']
}>

export interface TransferOrganizationOwnershipMutation { readonly __typename?: 'Mutation', readonly transferOrganizationOwnership: { readonly __typename?: 'TransferOrganizationOwnershipPayload', readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly currentUserIsOwner: boolean | null } | null } | null }

export type UnlinkUserAuthenticationMutationVariables = Exact<{
  id: Scalars['UUID']['input']
}>

export interface UnlinkUserAuthenticationMutation { readonly __typename?: 'Mutation', readonly deleteUserAuthentication: { readonly __typename?: 'DeleteUserAuthenticationPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly userAuthenticationsList: ReadonlyArray<{ readonly __typename?: 'UserAuthentication', readonly id: any, readonly identifier: string, readonly service: string, readonly createdAt: string }> } | null } | null }

export type UpdateOrganizationMutationVariables = Exact<{
  input: UpdateOrganizationInput
}>

export interface UpdateOrganizationMutation { readonly __typename?: 'Mutation', readonly updateOrganization: { readonly __typename?: 'UpdateOrganizationPayload', readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly slug: string, readonly name: string } | null } | null }

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['UUID']['input']
  patch: UserPatch
}>

export interface UpdateUserMutation { readonly __typename?: 'Mutation', readonly updateUser: { readonly __typename?: 'UpdateUserPayload', readonly clientMutationId: string | null, readonly user: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string } | null } | null }

export type VerifyEmailMutationVariables = Exact<{
  id: Scalars['UUID']['input']
  token: Scalars['String']['input']
}>

export interface VerifyEmailMutation { readonly __typename?: 'Mutation', readonly verifyEmail: { readonly __typename?: 'VerifyEmailPayload', readonly success: boolean | null, readonly query: { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly isVerified: boolean } | null } | null } | null }

export const CreatedOrganizationFragmentDoc = gql`
    fragment CreatedOrganization on Organization {
  id
  name
  slug
}
    `
export const EmailsForm_UserEmailFragmentDoc = gql`
    fragment EmailsForm_UserEmail on UserEmail {
  id
  email
  isVerified
  isPrimary
  createdAt
}
    `
export const EmailsForm_UserFragmentDoc = gql`
    fragment EmailsForm_User on User {
  id
  userEmails(first: 50) {
    nodes {
      ...EmailsForm_UserEmail
      id
      email
      isVerified
    }
  }
}
    `
export const OrganizationPage_OrganizationFragmentDoc = gql`
    fragment OrganizationPage_Organization on Organization {
  id
  name
  slug
  currentUserIsOwner
  currentUserIsBillingContact
}
    `
export const OrganizationMembers_MembershipFragmentDoc = gql`
    fragment OrganizationMembers_Membership on OrganizationMembership {
  id
  createdAt
  isOwner
  isBillingContact
  user {
    id
    username
    name
  }
}
    `
export const OrganizationMembers_OrganizationFragmentDoc = gql`
    fragment OrganizationMembers_Organization on Organization {
  id
  ...OrganizationPage_Organization
  name
  slug
  organizationMemberships(first: 10, offset: $offset, orderBy: [MEMBER_NAME_ASC]) {
    nodes {
      id
      ...OrganizationMembers_Membership
    }
    totalCount
  }
}
    `
export const SharedLayout_UserFragmentDoc = gql`
    fragment SharedLayout_User on User {
  id
  name
  username
  avatarUrl
  isAdmin
  isVerified
  organizationMemberships(first: 20) {
    nodes {
      id
      isOwner
      isBillingContact
      organization {
        id
        name
        slug
      }
    }
  }
}
    `
export const SharedLayout_QueryFragmentDoc = gql`
    fragment SharedLayout_Query on Query {
  currentUser {
    id
    ...SharedLayout_User
  }
}
    `
export const OrganizationPage_QueryFragmentDoc = gql`
    fragment OrganizationPage_Query on Query {
  ...SharedLayout_Query
  organizationBySlug(slug: $slug) {
    id
    ...OrganizationPage_Organization
  }
}
    `
export const ProfileSettingsForm_UserFragmentDoc = gql`
    fragment ProfileSettingsForm_User on User {
  id
  name
  username
  avatarUrl
}
    `
export const AcceptOrganizationInviteDocument = gql`
    mutation AcceptOrganizationInvite($id: UUID!, $code: String) {
  acceptInvitationToOrganization(input: {invitationId: $id, code: $code}) {
    clientMutationId
  }
}
    `

/**
 * __useAcceptOrganizationInviteMutation__
 *
 * To run a mutation, you first call `useAcceptOrganizationInviteMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useAcceptOrganizationInviteMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useAcceptOrganizationInviteMutation({
 *   variables: {
 *     id: // value for 'id'
 *     code: // value for 'code'
 *   },
 * });
 */
export function useAcceptOrganizationInviteMutation(options: VueApolloComposable.UseMutationOptions<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables>(AcceptOrganizationInviteDocument, options)
}
export type AcceptOrganizationInviteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables>
export const AddEmailDocument = gql`
    mutation AddEmail($email: String!) {
  createUserEmail(input: {userEmail: {email: $email}}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          ...EmailsForm_UserEmail
        }
      }
    }
  }
}
    ${EmailsForm_UserEmailFragmentDoc}`

/**
 * __useAddEmailMutation__
 *
 * To run a mutation, you first call `useAddEmailMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useAddEmailMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useAddEmailMutation({
 *   variables: {
 *     email: // value for 'email'
 *   },
 * });
 */
export function useAddEmailMutation(options: VueApolloComposable.UseMutationOptions<AddEmailMutation, AddEmailMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<AddEmailMutation, AddEmailMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<AddEmailMutation, AddEmailMutationVariables>(AddEmailDocument, options)
}
export type AddEmailMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<AddEmailMutation, AddEmailMutationVariables>
export const ChangePasswordDocument = gql`
    mutation ChangePassword($oldPassword: String!, $newPassword: String!) {
  changePassword(input: {oldPassword: $oldPassword, newPassword: $newPassword}) {
    success
  }
}
    `

/**
 * __useChangePasswordMutation__
 *
 * To run a mutation, you first call `useChangePasswordMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useChangePasswordMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useChangePasswordMutation({
 *   variables: {
 *     oldPassword: // value for 'oldPassword'
 *     newPassword: // value for 'newPassword'
 *   },
 * });
 */
export function useChangePasswordMutation(options: VueApolloComposable.UseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<ChangePasswordMutation, ChangePasswordMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument, options)
}
export type ChangePasswordMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<ChangePasswordMutation, ChangePasswordMutationVariables>
export const ConfirmAccountDeletionDocument = gql`
    mutation ConfirmAccountDeletion($token: String!) {
  confirmAccountDeletion(input: {token: $token}) {
    success
  }
}
    `

/**
 * __useConfirmAccountDeletionMutation__
 *
 * To run a mutation, you first call `useConfirmAccountDeletionMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useConfirmAccountDeletionMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useConfirmAccountDeletionMutation({
 *   variables: {
 *     token: // value for 'token'
 *   },
 * });
 */
export function useConfirmAccountDeletionMutation(options: VueApolloComposable.UseMutationOptions<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables>(ConfirmAccountDeletionDocument, options)
}
export type ConfirmAccountDeletionMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables>
export const CreateOrganizationDocument = gql`
    mutation CreateOrganization($name: String!, $slug: String!) {
  createOrganization(input: {name: $name, slug: $slug}) {
    organization {
      id
      ...CreatedOrganization
    }
    query {
      organizationBySlug(slug: $slug) {
        id
        ...CreatedOrganization
      }
    }
  }
}
    ${CreatedOrganizationFragmentDoc}`

/**
 * __useCreateOrganizationMutation__
 *
 * To run a mutation, you first call `useCreateOrganizationMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrganizationMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useCreateOrganizationMutation({
 *   variables: {
 *     name: // value for 'name'
 *     slug: // value for 'slug'
 *   },
 * });
 */
export function useCreateOrganizationMutation(options: VueApolloComposable.UseMutationOptions<CreateOrganizationMutation, CreateOrganizationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<CreateOrganizationMutation, CreateOrganizationMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<CreateOrganizationMutation, CreateOrganizationMutationVariables>(CreateOrganizationDocument, options)
}
export type CreateOrganizationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<CreateOrganizationMutation, CreateOrganizationMutationVariables>
export const CurrentUserAuthenticationsDocument = gql`
    query CurrentUserAuthentications {
  currentUser {
    id
    authentications: userAuthenticationsList(first: 50) {
      id
      service
      identifier
      createdAt
    }
  }
}
    `

/**
 * __useCurrentUserAuthenticationsQuery__
 *
 * To run a query within a Vue component, call `useCurrentUserAuthenticationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserAuthenticationsQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useCurrentUserAuthenticationsQuery();
 */
export function useCurrentUserAuthenticationsQuery(options: VueApolloComposable.UseQueryOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>(CurrentUserAuthenticationsDocument, {}, options)
}
export function useCurrentUserAuthenticationsLazyQuery(options: VueApolloComposable.UseQueryOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>(CurrentUserAuthenticationsDocument, {}, options)
}
export type CurrentUserAuthenticationsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables>
export const CurrentUserUpdatedDocument = gql`
    subscription CurrentUserUpdated {
  currentUserUpdated {
    event
    user {
      id
      username
      name
      avatarUrl
      isAdmin
      isVerified
    }
  }
}
    `

/**
 * __useCurrentUserUpdatedSubscription__
 *
 * To run a query within a Vue component, call `useCurrentUserUpdatedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserUpdatedSubscription` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/subscription.html#options;
 *
 * @example
 * const { result, loading, error } = useCurrentUserUpdatedSubscription();
 */
export function useCurrentUserUpdatedSubscription(options: VueApolloComposable.UseSubscriptionOptions<CurrentUserUpdatedSubscription, CurrentUserUpdatedSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<CurrentUserUpdatedSubscription, CurrentUserUpdatedSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<CurrentUserUpdatedSubscription, CurrentUserUpdatedSubscriptionVariables>> = {}) {
  return VueApolloComposable.useSubscription<CurrentUserUpdatedSubscription, CurrentUserUpdatedSubscriptionVariables>(CurrentUserUpdatedDocument, {}, options)
}
export type CurrentUserUpdatedSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<CurrentUserUpdatedSubscription, CurrentUserUpdatedSubscriptionVariables>
export const DeleteEmailDocument = gql`
    mutation DeleteEmail($emailId: UUID!) {
  deleteUserEmail(input: {id: $emailId}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          ...EmailsForm_UserEmail
        }
      }
    }
  }
}
    ${EmailsForm_UserEmailFragmentDoc}`

/**
 * __useDeleteEmailMutation__
 *
 * To run a mutation, you first call `useDeleteEmailMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useDeleteEmailMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useDeleteEmailMutation({
 *   variables: {
 *     emailId: // value for 'emailId'
 *   },
 * });
 */
export function useDeleteEmailMutation(options: VueApolloComposable.UseMutationOptions<DeleteEmailMutation, DeleteEmailMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<DeleteEmailMutation, DeleteEmailMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<DeleteEmailMutation, DeleteEmailMutationVariables>(DeleteEmailDocument, options)
}
export type DeleteEmailMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<DeleteEmailMutation, DeleteEmailMutationVariables>
export const DeleteOrganizationDocument = gql`
    mutation DeleteOrganization($organizationId: UUID!) {
  deleteOrganization(input: {organizationId: $organizationId}) {
    clientMutationId
  }
}
    `

/**
 * __useDeleteOrganizationMutation__
 *
 * To run a mutation, you first call `useDeleteOrganizationMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useDeleteOrganizationMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useDeleteOrganizationMutation({
 *   variables: {
 *     organizationId: // value for 'organizationId'
 *   },
 * });
 */
export function useDeleteOrganizationMutation(options: VueApolloComposable.UseMutationOptions<DeleteOrganizationMutation, DeleteOrganizationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<DeleteOrganizationMutation, DeleteOrganizationMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<DeleteOrganizationMutation, DeleteOrganizationMutationVariables>(DeleteOrganizationDocument, options)
}
export type DeleteOrganizationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<DeleteOrganizationMutation, DeleteOrganizationMutationVariables>
export const ForgotPasswordDocument = gql`
    mutation ForgotPassword($email: String!) {
  forgotPassword(input: {email: $email}) {
    clientMutationId
  }
}
    `

/**
 * __useForgotPasswordMutation__
 *
 * To run a mutation, you first call `useForgotPasswordMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useForgotPasswordMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useForgotPasswordMutation({
 *   variables: {
 *     email: // value for 'email'
 *   },
 * });
 */
export function useForgotPasswordMutation(options: VueApolloComposable.UseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, options)
}
export type ForgotPasswordMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<ForgotPasswordMutation, ForgotPasswordMutationVariables>
export const InvitationDetailDocument = gql`
    query InvitationDetail($id: UUID!, $code: String) {
  ...SharedLayout_Query
  organizationForInvitation(invitationId: $id, code: $code) {
    id
    name
    slug
  }
}
    ${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}`

/**
 * __useInvitationDetailQuery__
 *
 * To run a query within a Vue component, call `useInvitationDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useInvitationDetailQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param variables that will be passed into the query
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useInvitationDetailQuery({
 *   id: // value for 'id'
 *   code: // value for 'code'
 * });
 */
export function useInvitationDetailQuery(variables: InvitationDetailQueryVariables | VueCompositionApi.Ref<InvitationDetailQueryVariables> | ReactiveFunction<InvitationDetailQueryVariables>, options: VueApolloComposable.UseQueryOptions<InvitationDetailQuery, InvitationDetailQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<InvitationDetailQuery, InvitationDetailQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<InvitationDetailQuery, InvitationDetailQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<InvitationDetailQuery, InvitationDetailQueryVariables>(InvitationDetailDocument, variables, options)
}
export function useInvitationDetailLazyQuery(variables?: InvitationDetailQueryVariables | VueCompositionApi.Ref<InvitationDetailQueryVariables> | ReactiveFunction<InvitationDetailQueryVariables>, options: VueApolloComposable.UseQueryOptions<InvitationDetailQuery, InvitationDetailQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<InvitationDetailQuery, InvitationDetailQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<InvitationDetailQuery, InvitationDetailQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<InvitationDetailQuery, InvitationDetailQueryVariables>(InvitationDetailDocument, variables, options)
}
export type InvitationDetailQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<InvitationDetailQuery, InvitationDetailQueryVariables>
export const InviteToOrganizationDocument = gql`
    mutation InviteToOrganization($organizationId: UUID!, $email: String, $username: String) {
  inviteToOrganization(
    input: {organizationId: $organizationId, email: $email, username: $username}
  ) {
    clientMutationId
  }
}
    `

/**
 * __useInviteToOrganizationMutation__
 *
 * To run a mutation, you first call `useInviteToOrganizationMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useInviteToOrganizationMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useInviteToOrganizationMutation({
 *   variables: {
 *     organizationId: // value for 'organizationId'
 *     email: // value for 'email'
 *     username: // value for 'username'
 *   },
 * });
 */
export function useInviteToOrganizationMutation(options: VueApolloComposable.UseMutationOptions<InviteToOrganizationMutation, InviteToOrganizationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<InviteToOrganizationMutation, InviteToOrganizationMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<InviteToOrganizationMutation, InviteToOrganizationMutationVariables>(InviteToOrganizationDocument, options)
}
export type InviteToOrganizationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<InviteToOrganizationMutation, InviteToOrganizationMutationVariables>
export const LoginDocument = gql`
    mutation Login($username: String!, $password: String!) {
  login(input: {username: $username, password: $password}) {
    user {
      id
      username
      name
    }
  }
}
    `

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useLoginMutation({
 *   variables: {
 *     username: // value for 'username'
 *     password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(options: VueApolloComposable.UseMutationOptions<LoginMutation, LoginMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<LoginMutation, LoginMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options)
}
export type LoginMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<LoginMutation, LoginMutationVariables>
export const LogoutDocument = gql`
    mutation Logout {
  logout {
    success
  }
}
    `

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useLogoutMutation();
 */
export function useLogoutMutation(options: VueApolloComposable.UseMutationOptions<LogoutMutation, LogoutMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<LogoutMutation, LogoutMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options)
}
export type LogoutMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<LogoutMutation, LogoutMutationVariables>
export const MakeEmailPrimaryDocument = gql`
    mutation MakeEmailPrimary($emailId: UUID!) {
  makeEmailPrimary(input: {emailId: $emailId}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          isPrimary
        }
      }
    }
  }
}
    `

/**
 * __useMakeEmailPrimaryMutation__
 *
 * To run a mutation, you first call `useMakeEmailPrimaryMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useMakeEmailPrimaryMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useMakeEmailPrimaryMutation({
 *   variables: {
 *     emailId: // value for 'emailId'
 *   },
 * });
 */
export function useMakeEmailPrimaryMutation(options: VueApolloComposable.UseMutationOptions<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>(MakeEmailPrimaryDocument, options)
}
export type MakeEmailPrimaryMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>
export const OrganizationBySlugDocument = gql`
    query OrganizationBySlug($slug: String!) {
  organizationBySlug(slug: $slug) {
    id
    name
    slug
  }
}
    `

/**
 * __useOrganizationBySlugQuery__
 *
 * To run a query within a Vue component, call `useOrganizationBySlugQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrganizationBySlugQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param variables that will be passed into the query
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useOrganizationBySlugQuery({
 *   slug: // value for 'slug'
 * });
 */
export function useOrganizationBySlugQuery(variables: OrganizationBySlugQueryVariables | VueCompositionApi.Ref<OrganizationBySlugQueryVariables> | ReactiveFunction<OrganizationBySlugQueryVariables>, options: VueApolloComposable.UseQueryOptions<OrganizationBySlugQuery, OrganizationBySlugQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<OrganizationBySlugQuery, OrganizationBySlugQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<OrganizationBySlugQuery, OrganizationBySlugQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<OrganizationBySlugQuery, OrganizationBySlugQueryVariables>(OrganizationBySlugDocument, variables, options)
}
export function useOrganizationBySlugLazyQuery(variables?: OrganizationBySlugQueryVariables | VueCompositionApi.Ref<OrganizationBySlugQueryVariables> | ReactiveFunction<OrganizationBySlugQueryVariables>, options: VueApolloComposable.UseQueryOptions<OrganizationBySlugQuery, OrganizationBySlugQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<OrganizationBySlugQuery, OrganizationBySlugQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<OrganizationBySlugQuery, OrganizationBySlugQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<OrganizationBySlugQuery, OrganizationBySlugQueryVariables>(OrganizationBySlugDocument, variables, options)
}
export type OrganizationBySlugQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<OrganizationBySlugQuery, OrganizationBySlugQueryVariables>
export const OrganizationMembersDocument = gql`
    query OrganizationMembers($slug: String!, $offset: Int = 0) {
  ...OrganizationPage_Query
  organizationBySlug(slug: $slug) {
    id
    ...OrganizationMembers_Organization
  }
}
    ${OrganizationPage_QueryFragmentDoc}
${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}
${OrganizationPage_OrganizationFragmentDoc}
${OrganizationMembers_OrganizationFragmentDoc}
${OrganizationMembers_MembershipFragmentDoc}`

/**
 * __useOrganizationMembersQuery__
 *
 * To run a query within a Vue component, call `useOrganizationMembersQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrganizationMembersQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param variables that will be passed into the query
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useOrganizationMembersQuery({
 *   slug: // value for 'slug'
 *   offset: // value for 'offset'
 * });
 */
export function useOrganizationMembersQuery(variables: OrganizationMembersQueryVariables | VueCompositionApi.Ref<OrganizationMembersQueryVariables> | ReactiveFunction<OrganizationMembersQueryVariables>, options: VueApolloComposable.UseQueryOptions<OrganizationMembersQuery, OrganizationMembersQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<OrganizationMembersQuery, OrganizationMembersQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<OrganizationMembersQuery, OrganizationMembersQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<OrganizationMembersQuery, OrganizationMembersQueryVariables>(OrganizationMembersDocument, variables, options)
}
export function useOrganizationMembersLazyQuery(variables?: OrganizationMembersQueryVariables | VueCompositionApi.Ref<OrganizationMembersQueryVariables> | ReactiveFunction<OrganizationMembersQueryVariables>, options: VueApolloComposable.UseQueryOptions<OrganizationMembersQuery, OrganizationMembersQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<OrganizationMembersQuery, OrganizationMembersQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<OrganizationMembersQuery, OrganizationMembersQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<OrganizationMembersQuery, OrganizationMembersQueryVariables>(OrganizationMembersDocument, variables, options)
}
export type OrganizationMembersQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<OrganizationMembersQuery, OrganizationMembersQueryVariables>
export const OrganizationPageDocument = gql`
    query OrganizationPage($slug: String!) {
  ...OrganizationPage_Query
}
    ${OrganizationPage_QueryFragmentDoc}
${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}
${OrganizationPage_OrganizationFragmentDoc}`

/**
 * __useOrganizationPageQuery__
 *
 * To run a query within a Vue component, call `useOrganizationPageQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrganizationPageQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param variables that will be passed into the query
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useOrganizationPageQuery({
 *   slug: // value for 'slug'
 * });
 */
export function useOrganizationPageQuery(variables: OrganizationPageQueryVariables | VueCompositionApi.Ref<OrganizationPageQueryVariables> | ReactiveFunction<OrganizationPageQueryVariables>, options: VueApolloComposable.UseQueryOptions<OrganizationPageQuery, OrganizationPageQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<OrganizationPageQuery, OrganizationPageQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<OrganizationPageQuery, OrganizationPageQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<OrganizationPageQuery, OrganizationPageQueryVariables>(OrganizationPageDocument, variables, options)
}
export function useOrganizationPageLazyQuery(variables?: OrganizationPageQueryVariables | VueCompositionApi.Ref<OrganizationPageQueryVariables> | ReactiveFunction<OrganizationPageQueryVariables>, options: VueApolloComposable.UseQueryOptions<OrganizationPageQuery, OrganizationPageQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<OrganizationPageQuery, OrganizationPageQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<OrganizationPageQuery, OrganizationPageQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<OrganizationPageQuery, OrganizationPageQueryVariables>(OrganizationPageDocument, variables, options)
}
export type OrganizationPageQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<OrganizationPageQuery, OrganizationPageQueryVariables>
export const RegisterDocument = gql`
    mutation Register($username: String!, $password: String!, $email: String!, $name: String) {
  register(
    input: {username: $username, password: $password, email: $email, name: $name}
  ) {
    user {
      id
      username
      name
    }
  }
}
    `

/**
 * __useRegisterMutation__
 *
 * To run a mutation, you first call `useRegisterMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useRegisterMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useRegisterMutation({
 *   variables: {
 *     username: // value for 'username'
 *     password: // value for 'password'
 *     email: // value for 'email'
 *     name: // value for 'name'
 *   },
 * });
 */
export function useRegisterMutation(options: VueApolloComposable.UseMutationOptions<RegisterMutation, RegisterMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<RegisterMutation, RegisterMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options)
}
export type RegisterMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<RegisterMutation, RegisterMutationVariables>
export const RemoveFromOrganizationDocument = gql`
    mutation RemoveFromOrganization($organizationId: UUID!, $userId: UUID!) {
  removeFromOrganization(
    input: {organizationId: $organizationId, userId: $userId}
  ) {
    clientMutationId
  }
}
    `

/**
 * __useRemoveFromOrganizationMutation__
 *
 * To run a mutation, you first call `useRemoveFromOrganizationMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useRemoveFromOrganizationMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useRemoveFromOrganizationMutation({
 *   variables: {
 *     organizationId: // value for 'organizationId'
 *     userId: // value for 'userId'
 *   },
 * });
 */
export function useRemoveFromOrganizationMutation(options: VueApolloComposable.UseMutationOptions<RemoveFromOrganizationMutation, RemoveFromOrganizationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<RemoveFromOrganizationMutation, RemoveFromOrganizationMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<RemoveFromOrganizationMutation, RemoveFromOrganizationMutationVariables>(RemoveFromOrganizationDocument, options)
}
export type RemoveFromOrganizationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<RemoveFromOrganizationMutation, RemoveFromOrganizationMutationVariables>
export const RequestAccountDeletionDocument = gql`
    mutation RequestAccountDeletion {
  requestAccountDeletion(input: {}) {
    success
  }
}
    `

/**
 * __useRequestAccountDeletionMutation__
 *
 * To run a mutation, you first call `useRequestAccountDeletionMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useRequestAccountDeletionMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useRequestAccountDeletionMutation();
 */
export function useRequestAccountDeletionMutation(options: VueApolloComposable.UseMutationOptions<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables>(RequestAccountDeletionDocument, options)
}
export type RequestAccountDeletionMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables>
export const ResendEmailVerificationDocument = gql`
    mutation ResendEmailVerification($emailId: UUID!) {
  resendEmailVerificationCode(input: {emailId: $emailId}) {
    success
  }
}
    `

/**
 * __useResendEmailVerificationMutation__
 *
 * To run a mutation, you first call `useResendEmailVerificationMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useResendEmailVerificationMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useResendEmailVerificationMutation({
 *   variables: {
 *     emailId: // value for 'emailId'
 *   },
 * });
 */
export function useResendEmailVerificationMutation(options: VueApolloComposable.UseMutationOptions<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables>(ResendEmailVerificationDocument, options)
}
export type ResendEmailVerificationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables>
export const ResetPasswordDocument = gql`
    mutation ResetPassword($userId: UUID!, $token: String!, $password: String!) {
  resetPassword(
    input: {userId: $userId, resetToken: $token, newPassword: $password}
  ) {
    success
  }
}
    `

/**
 * __useResetPasswordMutation__
 *
 * To run a mutation, you first call `useResetPasswordMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useResetPasswordMutation({
 *   variables: {
 *     userId: // value for 'userId'
 *     token: // value for 'token'
 *     password: // value for 'password'
 *   },
 * });
 */
export function useResetPasswordMutation(options: VueApolloComposable.UseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, options)
}
export type ResetPasswordMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<ResetPasswordMutation, ResetPasswordMutationVariables>
export const SettingsEmailsDocument = gql`
    query SettingsEmails {
  ...SharedLayout_Query
  currentUser {
    id
    isVerified
    ...EmailsForm_User
  }
}
    ${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}
${EmailsForm_UserFragmentDoc}
${EmailsForm_UserEmailFragmentDoc}`

/**
 * __useSettingsEmailsQuery__
 *
 * To run a query within a Vue component, call `useSettingsEmailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsEmailsQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useSettingsEmailsQuery();
 */
export function useSettingsEmailsQuery(options: VueApolloComposable.UseQueryOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<SettingsEmailsQuery, SettingsEmailsQueryVariables>(SettingsEmailsDocument, {}, options)
}
export function useSettingsEmailsLazyQuery(options: VueApolloComposable.UseQueryOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<SettingsEmailsQuery, SettingsEmailsQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<SettingsEmailsQuery, SettingsEmailsQueryVariables>(SettingsEmailsDocument, {}, options)
}
export type SettingsEmailsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<SettingsEmailsQuery, SettingsEmailsQueryVariables>
export const SettingsPasswordDocument = gql`
    query SettingsPassword {
  currentUser {
    id
    hasPassword
    userEmails(first: 1, condition: {isPrimary: true}) {
      nodes {
        id
        email
      }
    }
  }
}
    `

/**
 * __useSettingsPasswordQuery__
 *
 * To run a query within a Vue component, call `useSettingsPasswordQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsPasswordQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useSettingsPasswordQuery();
 */
export function useSettingsPasswordQuery(options: VueApolloComposable.UseQueryOptions<SettingsPasswordQuery, SettingsPasswordQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<SettingsPasswordQuery, SettingsPasswordQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<SettingsPasswordQuery, SettingsPasswordQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<SettingsPasswordQuery, SettingsPasswordQueryVariables>(SettingsPasswordDocument, {}, options)
}
export function useSettingsPasswordLazyQuery(options: VueApolloComposable.UseQueryOptions<SettingsPasswordQuery, SettingsPasswordQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<SettingsPasswordQuery, SettingsPasswordQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<SettingsPasswordQuery, SettingsPasswordQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<SettingsPasswordQuery, SettingsPasswordQueryVariables>(SettingsPasswordDocument, {}, options)
}
export type SettingsPasswordQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<SettingsPasswordQuery, SettingsPasswordQueryVariables>
export const SettingsProfileDocument = gql`
    query SettingsProfile {
  ...SharedLayout_Query
  currentUser {
    id
    ...ProfileSettingsForm_User
  }
}
    ${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}
${ProfileSettingsForm_UserFragmentDoc}`

/**
 * __useSettingsProfileQuery__
 *
 * To run a query within a Vue component, call `useSettingsProfileQuery` and pass it any options that fit your needs.
 * When your component renders, `useSettingsProfileQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useSettingsProfileQuery();
 */
export function useSettingsProfileQuery(options: VueApolloComposable.UseQueryOptions<SettingsProfileQuery, SettingsProfileQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<SettingsProfileQuery, SettingsProfileQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<SettingsProfileQuery, SettingsProfileQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<SettingsProfileQuery, SettingsProfileQueryVariables>(SettingsProfileDocument, {}, options)
}
export function useSettingsProfileLazyQuery(options: VueApolloComposable.UseQueryOptions<SettingsProfileQuery, SettingsProfileQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<SettingsProfileQuery, SettingsProfileQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<SettingsProfileQuery, SettingsProfileQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<SettingsProfileQuery, SettingsProfileQueryVariables>(SettingsProfileDocument, {}, options)
}
export type SettingsProfileQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<SettingsProfileQuery, SettingsProfileQueryVariables>
export const SharedDocument = gql`
    query Shared {
  ...SharedLayout_Query
}
    ${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}`

/**
 * __useSharedQuery__
 *
 * To run a query within a Vue component, call `useSharedQuery` and pass it any options that fit your needs.
 * When your component renders, `useSharedQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useSharedQuery();
 */
export function useSharedQuery(options: VueApolloComposable.UseQueryOptions<SharedQuery, SharedQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<SharedQuery, SharedQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<SharedQuery, SharedQueryVariables>> = {}) {
  return VueApolloComposable.useQuery<SharedQuery, SharedQueryVariables>(SharedDocument, {}, options)
}
export function useSharedLazyQuery(options: VueApolloComposable.UseQueryOptions<SharedQuery, SharedQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<SharedQuery, SharedQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<SharedQuery, SharedQueryVariables>> = {}) {
  return VueApolloComposable.useLazyQuery<SharedQuery, SharedQueryVariables>(SharedDocument, {}, options)
}
export type SharedQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<SharedQuery, SharedQueryVariables>
export const TransferOrganizationBillingContactDocument = gql`
    mutation TransferOrganizationBillingContact($organizationId: UUID!, $userId: UUID!) {
  transferOrganizationBillingContact(
    input: {organizationId: $organizationId, userId: $userId}
  ) {
    organization {
      id
      currentUserIsBillingContact
    }
  }
}
    `

/**
 * __useTransferOrganizationBillingContactMutation__
 *
 * To run a mutation, you first call `useTransferOrganizationBillingContactMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useTransferOrganizationBillingContactMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useTransferOrganizationBillingContactMutation({
 *   variables: {
 *     organizationId: // value for 'organizationId'
 *     userId: // value for 'userId'
 *   },
 * });
 */
export function useTransferOrganizationBillingContactMutation(options: VueApolloComposable.UseMutationOptions<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables>(TransferOrganizationBillingContactDocument, options)
}
export type TransferOrganizationBillingContactMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables>
export const TransferOrganizationOwnershipDocument = gql`
    mutation TransferOrganizationOwnership($organizationId: UUID!, $userId: UUID!) {
  transferOrganizationOwnership(
    input: {organizationId: $organizationId, userId: $userId}
  ) {
    organization {
      id
      currentUserIsOwner
    }
  }
}
    `

/**
 * __useTransferOrganizationOwnershipMutation__
 *
 * To run a mutation, you first call `useTransferOrganizationOwnershipMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useTransferOrganizationOwnershipMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useTransferOrganizationOwnershipMutation({
 *   variables: {
 *     organizationId: // value for 'organizationId'
 *     userId: // value for 'userId'
 *   },
 * });
 */
export function useTransferOrganizationOwnershipMutation(options: VueApolloComposable.UseMutationOptions<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables>(TransferOrganizationOwnershipDocument, options)
}
export type TransferOrganizationOwnershipMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables>
export const UnlinkUserAuthenticationDocument = gql`
    mutation UnlinkUserAuthentication($id: UUID!) {
  deleteUserAuthentication(input: {id: $id}) {
    user {
      id
      userAuthenticationsList(first: 50) {
        id
        identifier
        service
        createdAt
      }
    }
  }
}
    `

/**
 * __useUnlinkUserAuthenticationMutation__
 *
 * To run a mutation, you first call `useUnlinkUserAuthenticationMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useUnlinkUserAuthenticationMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useUnlinkUserAuthenticationMutation({
 *   variables: {
 *     id: // value for 'id'
 *   },
 * });
 */
export function useUnlinkUserAuthenticationMutation(options: VueApolloComposable.UseMutationOptions<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>(UnlinkUserAuthenticationDocument, options)
}
export type UnlinkUserAuthenticationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>
export const UpdateOrganizationDocument = gql`
    mutation UpdateOrganization($input: UpdateOrganizationInput!) {
  updateOrganization(input: $input) {
    organization {
      id
      slug
      name
    }
  }
}
    `

/**
 * __useUpdateOrganizationMutation__
 *
 * To run a mutation, you first call `useUpdateOrganizationMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useUpdateOrganizationMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useUpdateOrganizationMutation({
 *   variables: {
 *     input: // value for 'input'
 *   },
 * });
 */
export function useUpdateOrganizationMutation(options: VueApolloComposable.UseMutationOptions<UpdateOrganizationMutation, UpdateOrganizationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateOrganizationMutation, UpdateOrganizationMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<UpdateOrganizationMutation, UpdateOrganizationMutationVariables>(UpdateOrganizationDocument, options)
}
export type UpdateOrganizationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateOrganizationMutation, UpdateOrganizationMutationVariables>
export const UpdateUserDocument = gql`
    mutation UpdateUser($id: UUID!, $patch: UserPatch!) {
  updateUser(input: {id: $id, patch: $patch}) {
    clientMutationId
    user {
      id
      name
      username
    }
  }
}
    `

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useUpdateUserMutation({
 *   variables: {
 *     id: // value for 'id'
 *     patch: // value for 'patch'
 *   },
 * });
 */
export function useUpdateUserMutation(options: VueApolloComposable.UseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options)
}
export type UpdateUserMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<UpdateUserMutation, UpdateUserMutationVariables>
export const VerifyEmailDocument = gql`
    mutation VerifyEmail($id: UUID!, $token: String!) {
  verifyEmail(input: {userEmailId: $id, token: $token}) {
    success
    query {
      currentUser {
        id
        isVerified
      }
    }
  }
}
    `

/**
 * __useVerifyEmailMutation__
 *
 * To run a mutation, you first call `useVerifyEmailMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useVerifyEmailMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useVerifyEmailMutation({
 *   variables: {
 *     id: // value for 'id'
 *     token: // value for 'token'
 *   },
 * });
 */
export function useVerifyEmailMutation(options: VueApolloComposable.UseMutationOptions<VerifyEmailMutation, VerifyEmailMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<VerifyEmailMutation, VerifyEmailMutationVariables>> = {}) {
  return VueApolloComposable.useMutation<VerifyEmailMutation, VerifyEmailMutationVariables>(VerifyEmailDocument, options)
}
export type VerifyEmailMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<VerifyEmailMutation, VerifyEmailMutationVariables>
