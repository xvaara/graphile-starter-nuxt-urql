/* WARNING: This file is automatically generated. Do not edit. */
/* eslint-disable @typescript-eslint/no-explicit-any, import/no-duplicates */
/* tslint:disable */
import type { cacheExchange } from '@urql/exchange-graphcache';
import type { Resolver as GraphCacheResolver, UpdateResolver as GraphCacheUpdateResolver, OptimisticMutationResolver as GraphCacheOptimisticMutationResolver } from '@urql/exchange-graphcache';

import gql from 'graphql-tag';
import * as Urql from '@urql/vue';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: { input: any; output: any; }
  /**
   * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) and, if it has a timezone, [RFC
   * 3339](https://datatracker.ietf.org/doc/html/rfc3339) standards. Input values
   * that do not conform to both ISO 8601 and RFC 3339 may be coerced, which may lead
   * to unexpected results.
   */
  Datetime: { input: string; output: string; }
  /** A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122). */
  UUID: { input: any; output: any; }
};

/** All input for the `acceptInvitationToOrganization` mutation. */
export type AcceptInvitationToOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly code?: InputMaybe<Scalars['String']['input']>;
  readonly invitationId: Scalars['UUID']['input'];
};

/** The output of our `acceptInvitationToOrganization` mutation. */
export type AcceptInvitationToOrganizationPayload = {
  readonly __typename?: 'AcceptInvitationToOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};

/** All input for the `changePassword` mutation. */
export type ChangePasswordInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly newPassword: Scalars['String']['input'];
  readonly oldPassword: Scalars['String']['input'];
};

/** The output of our `changePassword` mutation. */
export type ChangePasswordPayload = {
  readonly __typename?: 'ChangePasswordPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  readonly success: Maybe<Scalars['Boolean']['output']>;
};

/** All input for the `confirmAccountDeletion` mutation. */
export type ConfirmAccountDeletionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly token: Scalars['String']['input'];
};

/** The output of our `confirmAccountDeletion` mutation. */
export type ConfirmAccountDeletionPayload = {
  readonly __typename?: 'ConfirmAccountDeletionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  readonly success: Maybe<Scalars['Boolean']['output']>;
};

/** All input for the `createOrganization` mutation. */
export type CreateOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly name: Scalars['String']['input'];
  readonly slug: Scalars['String']['input'];
};

/** The output of our `createOrganization` mutation. */
export type CreateOrganizationPayload = {
  readonly __typename?: 'CreateOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  readonly organization: Maybe<Organization>;
  /** An edge for our `Organization`. May be used by Relay 1. */
  readonly organizationEdge: Maybe<OrganizationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};


/** The output of our `createOrganization` mutation. */
export type CreateOrganizationPayloadOrganizationEdgeArgs = {
  orderBy?: ReadonlyArray<OrganizationsOrderBy>;
};

/** All input for the create `UserEmail` mutation. */
export type CreateUserEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `UserEmail` to be created by this mutation. */
  readonly userEmail: UserEmailInput;
};

/** The output of our create `UserEmail` mutation. */
export type CreateUserEmailPayload = {
  readonly __typename?: 'CreateUserEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserEmail`. */
  readonly user: Maybe<User>;
  /** The `UserEmail` that was created by this mutation. */
  readonly userEmail: Maybe<UserEmail>;
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  readonly userEmailEdge: Maybe<UserEmailsEdge>;
};


/** The output of our create `UserEmail` mutation. */
export type CreateUserEmailPayloadUserEmailEdgeArgs = {
  orderBy?: ReadonlyArray<UserEmailsOrderBy>;
};

/** All input for the `deleteOrganization` mutation. */
export type DeleteOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly organizationId: Scalars['UUID']['input'];
};

/** The output of our `deleteOrganization` mutation. */
export type DeleteOrganizationPayload = {
  readonly __typename?: 'DeleteOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};

/** All input for the `deleteUserAuthentication` mutation. */
export type DeleteUserAuthenticationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly id: Scalars['UUID']['input'];
};

/** The output of our delete `UserAuthentication` mutation. */
export type DeleteUserAuthenticationPayload = {
  readonly __typename?: 'DeleteUserAuthenticationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserAuthentication`. */
  readonly user: Maybe<User>;
  /** The `UserAuthentication` that was deleted by this mutation. */
  readonly userAuthentication: Maybe<UserAuthentication>;
};

/** All input for the `deleteUserEmail` mutation. */
export type DeleteUserEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly id: Scalars['UUID']['input'];
};

/** The output of our delete `UserEmail` mutation. */
export type DeleteUserEmailPayload = {
  readonly __typename?: 'DeleteUserEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserEmail`. */
  readonly user: Maybe<User>;
  /** The `UserEmail` that was deleted by this mutation. */
  readonly userEmail: Maybe<UserEmail>;
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  readonly userEmailEdge: Maybe<UserEmailsEdge>;
};


/** The output of our delete `UserEmail` mutation. */
export type DeleteUserEmailPayloadUserEmailEdgeArgs = {
  orderBy?: ReadonlyArray<UserEmailsOrderBy>;
};

/** All input for the `forgotPassword` mutation. */
export type ForgotPasswordInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly email: Scalars['String']['input'];
};

/** The output of our `forgotPassword` mutation. */
export type ForgotPasswordPayload = {
  readonly __typename?: 'ForgotPasswordPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};

/** All input for the `inviteToOrganization` mutation. */
export type InviteToOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly email?: InputMaybe<Scalars['String']['input']>;
  readonly organizationId: Scalars['UUID']['input'];
  readonly username?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our `inviteToOrganization` mutation. */
export type InviteToOrganizationPayload = {
  readonly __typename?: 'InviteToOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};

export type LoginInput = {
  readonly password: Scalars['String']['input'];
  readonly username: Scalars['String']['input'];
};

export type LoginPayload = {
  readonly __typename?: 'LoginPayload';
  readonly user: User;
};

export type LogoutPayload = {
  readonly __typename?: 'LogoutPayload';
  readonly success: Maybe<Scalars['Boolean']['output']>;
};

/** All input for the `makeEmailPrimary` mutation. */
export type MakeEmailPrimaryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly emailId: Scalars['UUID']['input'];
};

/** The output of our `makeEmailPrimary` mutation. */
export type MakeEmailPrimaryPayload = {
  readonly __typename?: 'MakeEmailPrimaryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserEmail`. */
  readonly user: Maybe<User>;
  readonly userEmail: Maybe<UserEmail>;
  /** An edge for our `UserEmail`. May be used by Relay 1. */
  readonly userEmailEdge: Maybe<UserEmailsEdge>;
};


/** The output of our `makeEmailPrimary` mutation. */
export type MakeEmailPrimaryPayloadUserEmailEdgeArgs = {
  orderBy?: ReadonlyArray<UserEmailsOrderBy>;
};

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  readonly __typename?: 'Mutation';
  /** If someone invited you by your email address then you must include the code that was emailed to you, otherwise you may accept the invitation directly using the UUID. If successful, you will be a member of the organization. */
  readonly acceptInvitationToOrganization: Maybe<AcceptInvitationToOrganizationPayload>;
  /** Enter your old password and a new password to change your password. */
  readonly changePassword: Maybe<ChangePasswordPayload>;
  /** If you're certain you want to delete your account, use `requestAccountDeletion` to request an account deletion token, and then supply the token through this mutation to complete account deletion. */
  readonly confirmAccountDeletion: Maybe<ConfirmAccountDeletionPayload>;
  /** An `Organization` is a great way of sharing access to resources between multiple users without compromising security. When you create an organization you will have the 'owner' and 'billing contact' roles. You may invite other users and redistribute these roles. */
  readonly createOrganization: Maybe<CreateOrganizationPayload>;
  /** Creates a single `UserEmail`. */
  readonly createUserEmail: Maybe<CreateUserEmailPayload>;
  /** Only the 'owner' may delete an organization. This operation cannot be undone, so be sure that it is what you intend. */
  readonly deleteOrganization: Maybe<DeleteOrganizationPayload>;
  /** Deletes a single `UserAuthentication` using a unique key. */
  readonly deleteUserAuthentication: Maybe<DeleteUserAuthenticationPayload>;
  /** Deletes a single `UserEmail` using a unique key. */
  readonly deleteUserEmail: Maybe<DeleteUserEmailPayload>;
  /** If you've forgotten your password, give us one of your email addresses and we'll send you a reset token. Note this only works if you have added an email address! */
  readonly forgotPassword: Maybe<ForgotPasswordPayload>;
  /** You may invite a user to your organization either by their username (only for verified users) or by their email. If you opt to invite by email then an email will be sent to this person containing a code that they need to accept the invitation. If the person doesn't already have an account they will be instructed to create one; their account need not have the email address that you invited listed as the secret code is confirmation enough. */
  readonly inviteToOrganization: Maybe<InviteToOrganizationPayload>;
  /** Use this mutation to log in to your account; this login uses sessions so you do not need to take further action. */
  readonly login: Maybe<LoginPayload>;
  /** Use this mutation to logout from your account. Don't forget to clear the client state! */
  readonly logout: Maybe<LogoutPayload>;
  /** Your primary email is where we'll notify of account events; other emails may be used for discovery or login. Use this when you're changing your email address. */
  readonly makeEmailPrimary: Maybe<MakeEmailPrimaryPayload>;
  /** Use this mutation to create an account on our system. This may only be used if you are logged out. */
  readonly register: Maybe<RegisterPayload>;
  /** The owner of an `Organization` may remove an `OrganizationMember` with this mutation. */
  readonly removeFromOrganization: Maybe<RemoveFromOrganizationPayload>;
  /** Begin the account deletion flow by requesting the confirmation email */
  readonly requestAccountDeletion: Maybe<RequestAccountDeletionPayload>;
  /** If you didn't receive the verification code for this email, we can resend it. We silently cap the rate of resends on the backend, so calls to this function may not result in another email being sent if it has been called recently. */
  readonly resendEmailVerificationCode: Maybe<ResendEmailVerificationCodePayload>;
  /** After triggering forgotPassword, you'll be sent a reset token. Combine this with your user ID and a new password to reset your password. */
  readonly resetPassword: Maybe<ResetPasswordPayload>;
  /** The owner of an `Organization` may use this mutation to make any organization member the billing contact. */
  readonly transferOrganizationBillingContact: Maybe<TransferOrganizationBillingContactPayload>;
  /** The owner of an `Organization` may use this mutation to transfer ownership to a different organization member. Take care, if you assign ownership to someone who cannot or will not access their account then you may need to contact support to have ownership reassigned. */
  readonly transferOrganizationOwnership: Maybe<TransferOrganizationOwnershipPayload>;
  /** Updates a single `Organization` using a unique key and a patch. */
  readonly updateOrganization: Maybe<UpdateOrganizationPayload>;
  /** Updates a single `User` using a unique key and a patch. */
  readonly updateUser: Maybe<UpdateUserPayload>;
  /** Once you have received a verification token for your email, you may call this mutation with that token to make your email verified. */
  readonly verifyEmail: Maybe<VerifyEmailPayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationAcceptInvitationToOrganizationArgs = {
  input: AcceptInvitationToOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationChangePasswordArgs = {
  input: ChangePasswordInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationConfirmAccountDeletionArgs = {
  input: ConfirmAccountDeletionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganizationArgs = {
  input: CreateOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserEmailArgs = {
  input: CreateUserEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganizationArgs = {
  input: DeleteOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserAuthenticationArgs = {
  input: DeleteUserAuthenticationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserEmailArgs = {
  input: DeleteUserEmailInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationForgotPasswordArgs = {
  input: ForgotPasswordInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationInviteToOrganizationArgs = {
  input: InviteToOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationLoginArgs = {
  input: LoginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationMakeEmailPrimaryArgs = {
  input: MakeEmailPrimaryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRegisterArgs = {
  input: RegisterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRemoveFromOrganizationArgs = {
  input: RemoveFromOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationRequestAccountDeletionArgs = {
  input: RequestAccountDeletionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationResendEmailVerificationCodeArgs = {
  input: ResendEmailVerificationCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationResetPasswordArgs = {
  input: ResetPasswordInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationTransferOrganizationBillingContactArgs = {
  input: TransferOrganizationBillingContactInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationTransferOrganizationOwnershipArgs = {
  input: TransferOrganizationOwnershipInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganizationArgs = {
  input: UpdateOrganizationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationVerifyEmailArgs = {
  input: VerifyEmailInput;
};

export type Organization = {
  readonly __typename?: 'Organization';
  readonly createdAt: Scalars['Datetime']['output'];
  readonly currentUserIsBillingContact: Maybe<Scalars['Boolean']['output']>;
  readonly currentUserIsOwner: Maybe<Scalars['Boolean']['output']>;
  readonly id: Scalars['UUID']['output'];
  readonly name: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `OrganizationMembership`. */
  readonly organizationMemberships: OrganizationMembershipsConnection;
  readonly slug: Scalars['String']['output'];
};


export type OrganizationOrganizationMembershipsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<OrganizationMembershipCondition>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<OrganizationMembershipsOrderBy>>;
};

/**
 * A condition to be used against `Organization` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type OrganizationCondition = {
  /** Checks for equality with the object’s `id` field. */
  readonly id?: InputMaybe<Scalars['UUID']['input']>;
  /** Checks for equality with the object’s `slug` field. */
  readonly slug?: InputMaybe<Scalars['String']['input']>;
};

export type OrganizationMembership = {
  readonly __typename?: 'OrganizationMembership';
  readonly createdAt: Scalars['Datetime']['output'];
  readonly id: Scalars['UUID']['output'];
  readonly isBillingContact: Scalars['Boolean']['output'];
  readonly isOwner: Scalars['Boolean']['output'];
  /** Reads a single `Organization` that is related to this `OrganizationMembership`. */
  readonly organization: Maybe<Organization>;
  readonly organizationId: Scalars['UUID']['output'];
  /** Reads a single `User` that is related to this `OrganizationMembership`. */
  readonly user: Maybe<User>;
  readonly userId: Scalars['UUID']['output'];
};

/**
 * A condition to be used against `OrganizationMembership` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type OrganizationMembershipCondition = {
  /** Checks for equality with the object’s `id` field. */
  readonly id?: InputMaybe<Scalars['UUID']['input']>;
  /** Checks for equality with the object’s `organizationId` field. */
  readonly organizationId?: InputMaybe<Scalars['UUID']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  readonly userId?: InputMaybe<Scalars['UUID']['input']>;
};

/** A connection to a list of `OrganizationMembership` values. */
export type OrganizationMembershipsConnection = {
  readonly __typename?: 'OrganizationMembershipsConnection';
  /** A list of edges which contains the `OrganizationMembership` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<OrganizationMembershipsEdge>;
  /** A list of `OrganizationMembership` objects. */
  readonly nodes: ReadonlyArray<OrganizationMembership>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `OrganizationMembership` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A `OrganizationMembership` edge in the connection. */
export type OrganizationMembershipsEdge = {
  readonly __typename?: 'OrganizationMembershipsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `OrganizationMembership` at the end of the edge. */
  readonly node: OrganizationMembership;
};

/** Methods to use when ordering `OrganizationMembership`. */
export type OrganizationMembershipsOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'MEMBER_NAME_ASC'
  | 'MEMBER_NAME_DESC'
  | 'NATURAL'
  | 'ORGANIZATION_ID_ASC'
  | 'ORGANIZATION_ID_DESC'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'USER_ID_ASC'
  | 'USER_ID_DESC';

/** Represents an update to a `Organization`. Fields that are set will be updated. */
export type OrganizationPatch = {
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly slug?: InputMaybe<Scalars['String']['input']>;
};

/** A connection to a list of `Organization` values. */
export type OrganizationsConnection = {
  readonly __typename?: 'OrganizationsConnection';
  /** A list of edges which contains the `Organization` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<OrganizationsEdge>;
  /** A list of `Organization` objects. */
  readonly nodes: ReadonlyArray<Organization>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Organization` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A `Organization` edge in the connection. */
export type OrganizationsEdge = {
  readonly __typename?: 'OrganizationsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Organization` at the end of the edge. */
  readonly node: Organization;
};

/** Methods to use when ordering `Organization`. */
export type OrganizationsOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'NATURAL'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'SLUG_ASC'
  | 'SLUG_DESC';

/** Information about pagination in a connection. */
export type PageInfo = {
  readonly __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  readonly endCursor: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  readonly hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  readonly hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  readonly startCursor: Maybe<Scalars['Cursor']['output']>;
};

/** The root query type which gives access points into the data universe. */
export type Query = {
  readonly __typename?: 'Query';
  /** The currently logged in user (or null if not logged in). */
  readonly currentUser: Maybe<User>;
  /** Get a single `Organization`. */
  readonly organization: Maybe<Organization>;
  /** Get a single `Organization`. */
  readonly organizationBySlug: Maybe<Organization>;
  /** Given an invitation UUID (and, if required, the code that was emailed to you), retrieves the `Organization` that you were invited to. */
  readonly organizationForInvitation: Maybe<Organization>;
  /** Get a single `OrganizationMembership`. */
  readonly organizationMembership: Maybe<OrganizationMembership>;
  /** Reads and enables pagination through a set of `Organization`. */
  readonly organizations: Maybe<OrganizationsConnection>;
  /** Get a single `User`. */
  readonly user: Maybe<User>;
  /** Get a single `UserAuthentication`. */
  readonly userAuthentication: Maybe<UserAuthentication>;
  /** Get a single `User`. */
  readonly userByUsername: Maybe<User>;
  /** Get a single `UserEmail`. */
  readonly userEmail: Maybe<UserEmail>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationArgs = {
  id: Scalars['UUID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationBySlugArgs = {
  slug: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationForInvitationArgs = {
  code?: InputMaybe<Scalars['String']['input']>;
  invitationId: Scalars['UUID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationMembershipArgs = {
  id: Scalars['UUID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganizationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<OrganizationCondition>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<OrganizationsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserArgs = {
  id: Scalars['UUID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserAuthenticationArgs = {
  id: Scalars['UUID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserByUsernameArgs = {
  username: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserEmailArgs = {
  id: Scalars['UUID']['input'];
};

export type RegisterInput = {
  readonly avatarUrl?: InputMaybe<Scalars['String']['input']>;
  readonly email: Scalars['String']['input'];
  readonly name?: InputMaybe<Scalars['String']['input']>;
  readonly password: Scalars['String']['input'];
  readonly username: Scalars['String']['input'];
};

export type RegisterPayload = {
  readonly __typename?: 'RegisterPayload';
  readonly user: User;
};

/** All input for the `removeFromOrganization` mutation. */
export type RemoveFromOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly organizationId: Scalars['UUID']['input'];
  readonly userId: Scalars['UUID']['input'];
};

/** The output of our `removeFromOrganization` mutation. */
export type RemoveFromOrganizationPayload = {
  readonly __typename?: 'RemoveFromOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};

/** All input for the `requestAccountDeletion` mutation. */
export type RequestAccountDeletionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our `requestAccountDeletion` mutation. */
export type RequestAccountDeletionPayload = {
  readonly __typename?: 'RequestAccountDeletionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  readonly success: Maybe<Scalars['Boolean']['output']>;
};

/** All input for the `resendEmailVerificationCode` mutation. */
export type ResendEmailVerificationCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly emailId: Scalars['UUID']['input'];
};

/** The output of our `resendEmailVerificationCode` mutation. */
export type ResendEmailVerificationCodePayload = {
  readonly __typename?: 'ResendEmailVerificationCodePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  readonly success: Maybe<Scalars['Boolean']['output']>;
};

/** All input for the `resetPassword` mutation. */
export type ResetPasswordInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly newPassword: Scalars['String']['input'];
  readonly resetToken: Scalars['String']['input'];
  readonly userId: Scalars['UUID']['input'];
};

/** The output of our `resetPassword` mutation. */
export type ResetPasswordPayload = {
  readonly __typename?: 'ResetPasswordPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  readonly success: Maybe<Scalars['Boolean']['output']>;
};

/** The root subscription type: contains realtime events you can subscribe to with the `subscription` operation. */
export type Subscription = {
  readonly __typename?: 'Subscription';
  /** Triggered when the logged in user's record is updated in some way. */
  readonly currentUserUpdated: Maybe<UserSubscriptionPayload>;
};

/** All input for the `transferOrganizationBillingContact` mutation. */
export type TransferOrganizationBillingContactInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly organizationId: Scalars['UUID']['input'];
  readonly userId: Scalars['UUID']['input'];
};

/** The output of our `transferOrganizationBillingContact` mutation. */
export type TransferOrganizationBillingContactPayload = {
  readonly __typename?: 'TransferOrganizationBillingContactPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  readonly organization: Maybe<Organization>;
  /** An edge for our `Organization`. May be used by Relay 1. */
  readonly organizationEdge: Maybe<OrganizationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};


/** The output of our `transferOrganizationBillingContact` mutation. */
export type TransferOrganizationBillingContactPayloadOrganizationEdgeArgs = {
  orderBy?: ReadonlyArray<OrganizationsOrderBy>;
};

/** All input for the `transferOrganizationOwnership` mutation. */
export type TransferOrganizationOwnershipInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly organizationId: Scalars['UUID']['input'];
  readonly userId: Scalars['UUID']['input'];
};

/** The output of our `transferOrganizationOwnership` mutation. */
export type TransferOrganizationOwnershipPayload = {
  readonly __typename?: 'TransferOrganizationOwnershipPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  readonly organization: Maybe<Organization>;
  /** An edge for our `Organization`. May be used by Relay 1. */
  readonly organizationEdge: Maybe<OrganizationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};


/** The output of our `transferOrganizationOwnership` mutation. */
export type TransferOrganizationOwnershipPayloadOrganizationEdgeArgs = {
  orderBy?: ReadonlyArray<OrganizationsOrderBy>;
};

/** All input for the `updateOrganization` mutation. */
export type UpdateOrganizationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly id: Scalars['UUID']['input'];
  /** An object where the defined keys will be set on the `Organization` being updated. */
  readonly patch: OrganizationPatch;
};

/** The output of our update `Organization` mutation. */
export type UpdateOrganizationPayload = {
  readonly __typename?: 'UpdateOrganizationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** The `Organization` that was updated by this mutation. */
  readonly organization: Maybe<Organization>;
  /** An edge for our `Organization`. May be used by Relay 1. */
  readonly organizationEdge: Maybe<OrganizationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
};


/** The output of our update `Organization` mutation. */
export type UpdateOrganizationPayloadOrganizationEdgeArgs = {
  orderBy?: ReadonlyArray<OrganizationsOrderBy>;
};

/** All input for the `updateUser` mutation. */
export type UpdateUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Unique identifier for the user. */
  readonly id: Scalars['UUID']['input'];
  /** An object where the defined keys will be set on the `User` being updated. */
  readonly patch: UserPatch;
};

/** The output of our update `User` mutation. */
export type UpdateUserPayload = {
  readonly __typename?: 'UpdateUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  /** The `User` that was updated by this mutation. */
  readonly user: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  readonly userEdge: Maybe<UsersEdge>;
};


/** The output of our update `User` mutation. */
export type UpdateUserPayloadUserEdgeArgs = {
  orderBy?: ReadonlyArray<UsersOrderBy>;
};

/** A user who can log in to the application. */
export type User = {
  readonly __typename?: 'User';
  /** Optional avatar URL. */
  readonly avatarUrl: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['Datetime']['output'];
  readonly footest: Maybe<Scalars['String']['output']>;
  readonly hasPassword: Maybe<Scalars['Boolean']['output']>;
  /** Unique identifier for the user. */
  readonly id: Scalars['UUID']['output'];
  /** If true, the user has elevated privileges. */
  readonly isAdmin: Scalars['Boolean']['output'];
  readonly isVerified: Scalars['Boolean']['output'];
  /** Public-facing name (or pseudonym) of the user. */
  readonly name: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `OrganizationMembership`. */
  readonly organizationMemberships: OrganizationMembershipsConnection;
  readonly updatedAt: Scalars['Datetime']['output'];
  /** Reads and enables pagination through a set of `UserAuthentication`. */
  readonly userAuthenticationsList: ReadonlyArray<UserAuthentication>;
  /** Reads and enables pagination through a set of `UserEmail`. */
  readonly userEmails: UserEmailsConnection;
  /** Public-facing username (or 'handle') of the user. */
  readonly username: Scalars['String']['output'];
};


/** A user who can log in to the application. */
export type UserOrganizationMembershipsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<OrganizationMembershipCondition>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<OrganizationMembershipsOrderBy>>;
};


/** A user who can log in to the application. */
export type UserUserAuthenticationsListArgs = {
  condition?: InputMaybe<UserAuthenticationCondition>;
  first?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<UserAuthenticationsOrderBy>>;
};


/** A user who can log in to the application. */
export type UserUserEmailsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<UserEmailCondition>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<ReadonlyArray<UserEmailsOrderBy>>;
};

/** Contains information about the login providers this user has used, so that they may disconnect them should they wish. */
export type UserAuthentication = {
  readonly __typename?: 'UserAuthentication';
  readonly createdAt: Scalars['Datetime']['output'];
  readonly id: Scalars['UUID']['output'];
  /** A unique identifier for the user within the login service. */
  readonly identifier: Scalars['String']['output'];
  /** The login service used, e.g. `twitter` or `github`. */
  readonly service: Scalars['String']['output'];
  readonly updatedAt: Scalars['Datetime']['output'];
  /** Reads a single `User` that is related to this `UserAuthentication`. */
  readonly user: Maybe<User>;
  readonly userId: Scalars['UUID']['output'];
};

/**
 * A condition to be used against `UserAuthentication` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserAuthenticationCondition = {
  /** Checks for equality with the object’s `id` field. */
  readonly id?: InputMaybe<Scalars['UUID']['input']>;
  /** Checks for equality with the object’s `service` field. */
  readonly service?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  readonly userId?: InputMaybe<Scalars['UUID']['input']>;
};

/** Methods to use when ordering `UserAuthentication`. */
export type UserAuthenticationsOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'NATURAL'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'SERVICE_ASC'
  | 'SERVICE_DESC'
  | 'USER_ID_ASC'
  | 'USER_ID_DESC';

/** Information about a user's email address. */
export type UserEmail = {
  readonly __typename?: 'UserEmail';
  readonly createdAt: Scalars['Datetime']['output'];
  /** The users email address, in `a@b.c` format. */
  readonly email: Scalars['String']['output'];
  readonly id: Scalars['UUID']['output'];
  readonly isPrimary: Scalars['Boolean']['output'];
  /** True if the user has is_verified their email address (by clicking the link in the email we sent them, or logging in with a social login provider), false otherwise. */
  readonly isVerified: Scalars['Boolean']['output'];
  readonly updatedAt: Scalars['Datetime']['output'];
  /** Reads a single `User` that is related to this `UserEmail`. */
  readonly user: Maybe<User>;
  readonly userId: Scalars['UUID']['output'];
};

/**
 * A condition to be used against `UserEmail` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type UserEmailCondition = {
  /** Checks for equality with the object’s `id` field. */
  readonly id?: InputMaybe<Scalars['UUID']['input']>;
  /** Checks for equality with the object’s `isPrimary` field. */
  readonly isPrimary?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  readonly userId?: InputMaybe<Scalars['UUID']['input']>;
};

/** An input for mutations affecting `UserEmail` */
export type UserEmailInput = {
  /** The users email address, in `a@b.c` format. */
  readonly email: Scalars['String']['input'];
};

/** A connection to a list of `UserEmail` values. */
export type UserEmailsConnection = {
  readonly __typename?: 'UserEmailsConnection';
  /** A list of edges which contains the `UserEmail` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<UserEmailsEdge>;
  /** A list of `UserEmail` objects. */
  readonly nodes: ReadonlyArray<UserEmail>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `UserEmail` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A `UserEmail` edge in the connection. */
export type UserEmailsEdge = {
  readonly __typename?: 'UserEmailsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `UserEmail` at the end of the edge. */
  readonly node: UserEmail;
};

/** Methods to use when ordering `UserEmail`. */
export type UserEmailsOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'IS_PRIMARY_ASC'
  | 'IS_PRIMARY_DESC'
  | 'NATURAL'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'USER_ID_ASC'
  | 'USER_ID_DESC';

/** Represents an update to a `User`. Fields that are set will be updated. */
export type UserPatch = {
  /** Optional avatar URL. */
  readonly avatarUrl?: InputMaybe<Scalars['String']['input']>;
  /** Public-facing name (or pseudonym) of the user. */
  readonly name?: InputMaybe<Scalars['String']['input']>;
  /** Public-facing username (or 'handle') of the user. */
  readonly username?: InputMaybe<Scalars['String']['input']>;
};

export type UserSubscriptionPayload = {
  readonly __typename?: 'UserSubscriptionPayload';
  readonly event: Maybe<Scalars['String']['output']>;
  readonly user: Maybe<User>;
};

/** A `User` edge in the connection. */
export type UsersEdge = {
  readonly __typename?: 'UsersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `User` at the end of the edge. */
  readonly node: User;
};

/** Methods to use when ordering `User`. */
export type UsersOrderBy =
  | 'ID_ASC'
  | 'ID_DESC'
  | 'NATURAL'
  | 'PRIMARY_KEY_ASC'
  | 'PRIMARY_KEY_DESC'
  | 'USERNAME_ASC'
  | 'USERNAME_DESC';

/** All input for the `verifyEmail` mutation. */
export type VerifyEmailInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  readonly clientMutationId?: InputMaybe<Scalars['String']['input']>;
  readonly token: Scalars['String']['input'];
  readonly userEmailId: Scalars['UUID']['input'];
};

/** The output of our `verifyEmail` mutation. */
export type VerifyEmailPayload = {
  readonly __typename?: 'VerifyEmailPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  readonly clientMutationId: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  readonly query: Maybe<Query>;
  readonly success: Maybe<Scalars['Boolean']['output']>;
};

export type AcceptOrganizationInviteMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  code?: InputMaybe<Scalars['String']['input']>;
}>;


export type AcceptOrganizationInviteMutation = { readonly __typename?: 'Mutation', readonly acceptInvitationToOrganization: { readonly __typename?: 'AcceptInvitationToOrganizationPayload', readonly clientMutationId: string | null } | null };

export type AddEmailMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type AddEmailMutation = { readonly __typename?: 'Mutation', readonly createUserEmail: { readonly __typename?: 'CreateUserEmailPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }> } } | null } | null };

export type ChangePasswordMutationVariables = Exact<{
  oldPassword: Scalars['String']['input'];
  newPassword: Scalars['String']['input'];
}>;


export type ChangePasswordMutation = { readonly __typename?: 'Mutation', readonly changePassword: { readonly __typename?: 'ChangePasswordPayload', readonly success: boolean | null } | null };

export type ConfirmAccountDeletionMutationVariables = Exact<{
  token: Scalars['String']['input'];
}>;


export type ConfirmAccountDeletionMutation = { readonly __typename?: 'Mutation', readonly confirmAccountDeletion: { readonly __typename?: 'ConfirmAccountDeletionPayload', readonly success: boolean | null } | null };

export type CreatedOrganizationFragment = { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string };

export type CreateOrganizationMutationVariables = Exact<{
  name: Scalars['String']['input'];
  slug: Scalars['String']['input'];
}>;


export type CreateOrganizationMutation = { readonly __typename?: 'Mutation', readonly createOrganization: { readonly __typename?: 'CreateOrganizationPayload', readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null, readonly query: { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null } | null } | null };

export type CurrentUserAuthenticationsQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserAuthenticationsQuery = { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly authentications: ReadonlyArray<{ readonly __typename?: 'UserAuthentication', readonly id: any, readonly service: string, readonly identifier: string, readonly createdAt: string }> } | null };

export type CurrentUserUpdatedSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type CurrentUserUpdatedSubscription = { readonly __typename?: 'Subscription', readonly currentUserUpdated: { readonly __typename?: 'UserSubscriptionPayload', readonly event: string | null, readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean } | null } | null };

export type DeleteEmailMutationVariables = Exact<{
  emailId: Scalars['UUID']['input'];
}>;


export type DeleteEmailMutation = { readonly __typename?: 'Mutation', readonly deleteUserEmail: { readonly __typename?: 'DeleteUserEmailPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }> } } | null } | null };

export type DeleteOrganizationMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
}>;


export type DeleteOrganizationMutation = { readonly __typename?: 'Mutation', readonly deleteOrganization: { readonly __typename?: 'DeleteOrganizationPayload', readonly clientMutationId: string | null } | null };

export type EmailsForm_UserFragment = { readonly __typename?: 'User', readonly id: any, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }> } };

export type EmailsForm_UserEmailFragment = { readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string };

export type ForgotPasswordMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type ForgotPasswordMutation = { readonly __typename?: 'Mutation', readonly forgotPassword: { readonly __typename?: 'ForgotPasswordPayload', readonly clientMutationId: string | null } | null };

export type InvitationDetailQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
  code?: InputMaybe<Scalars['String']['input']>;
}>;


export type InvitationDetailQuery = { readonly __typename?: 'Query', readonly organizationForInvitation: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null, readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null };

export type InviteToOrganizationMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
  email?: InputMaybe<Scalars['String']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
}>;


export type InviteToOrganizationMutation = { readonly __typename?: 'Mutation', readonly inviteToOrganization: { readonly __typename?: 'InviteToOrganizationPayload', readonly clientMutationId: string | null } | null };

export type LoginMutationVariables = Exact<{
  username: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginMutation = { readonly __typename?: 'Mutation', readonly login: { readonly __typename?: 'LoginPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } } | null };

export type LogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutMutation = { readonly __typename?: 'Mutation', readonly logout: { readonly __typename?: 'LogoutPayload', readonly success: boolean | null } | null };

export type MakeEmailPrimaryMutationVariables = Exact<{
  emailId: Scalars['UUID']['input'];
}>;


export type MakeEmailPrimaryMutation = { readonly __typename?: 'Mutation', readonly makeEmailPrimary: { readonly __typename?: 'MakeEmailPrimaryPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly isPrimary: boolean }> } } | null } | null };

export type OrganizationBySlugQueryVariables = Exact<{
  slug: Scalars['String']['input'];
}>;


export type OrganizationBySlugQuery = { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null };

export type OrganizationMembers_MembershipFragment = { readonly __typename?: 'OrganizationMembership', readonly id: any, readonly createdAt: string, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } | null };

export type OrganizationMembers_OrganizationFragment = { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly createdAt: string, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } | null }> } };

export type OrganizationMembersQueryVariables = Exact<{
  slug: Scalars['String']['input'];
  offset?: InputMaybe<Scalars['Int']['input']>;
}>;


export type OrganizationMembersQuery = { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly totalCount: number, readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly createdAt: string, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } | null }> } } | null, readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null };

export type OrganizationPageQueryVariables = Exact<{
  slug: Scalars['String']['input'];
}>;


export type OrganizationPageQuery = { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null } | null, readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null };

export type OrganizationPage_OrganizationFragment = { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null };

export type OrganizationPage_QueryFragment = { readonly __typename?: 'Query', readonly organizationBySlug: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string, readonly currentUserIsOwner: boolean | null, readonly currentUserIsBillingContact: boolean | null } | null, readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null };

export type ProfileSettingsForm_UserFragment = { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null };

export type RegisterMutationVariables = Exact<{
  username: Scalars['String']['input'];
  password: Scalars['String']['input'];
  email: Scalars['String']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
}>;


export type RegisterMutation = { readonly __typename?: 'Mutation', readonly register: { readonly __typename?: 'RegisterPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly username: string, readonly name: string | null } } | null };

export type RemoveFromOrganizationMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
  userId: Scalars['UUID']['input'];
}>;


export type RemoveFromOrganizationMutation = { readonly __typename?: 'Mutation', readonly removeFromOrganization: { readonly __typename?: 'RemoveFromOrganizationPayload', readonly clientMutationId: string | null } | null };

export type RequestAccountDeletionMutationVariables = Exact<{ [key: string]: never; }>;


export type RequestAccountDeletionMutation = { readonly __typename?: 'Mutation', readonly requestAccountDeletion: { readonly __typename?: 'RequestAccountDeletionPayload', readonly success: boolean | null } | null };

export type ResendEmailVerificationMutationVariables = Exact<{
  emailId: Scalars['UUID']['input'];
}>;


export type ResendEmailVerificationMutation = { readonly __typename?: 'Mutation', readonly resendEmailVerificationCode: { readonly __typename?: 'ResendEmailVerificationCodePayload', readonly success: boolean | null } | null };

export type ResetPasswordMutationVariables = Exact<{
  userId: Scalars['UUID']['input'];
  token: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type ResetPasswordMutation = { readonly __typename?: 'Mutation', readonly resetPassword: { readonly __typename?: 'ResetPasswordPayload', readonly success: boolean | null } | null };

export type SettingsEmailsQueryVariables = Exact<{ [key: string]: never; }>;


export type SettingsEmailsQuery = { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly isVerified: boolean, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string, readonly isVerified: boolean, readonly isPrimary: boolean, readonly createdAt: string }> }, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null };

export type SettingsPasswordQueryVariables = Exact<{ [key: string]: never; }>;


export type SettingsPasswordQuery = { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly hasPassword: boolean | null, readonly userEmails: { readonly __typename?: 'UserEmailsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'UserEmail', readonly id: any, readonly email: string }> } } | null };

export type SettingsProfileQueryVariables = Exact<{ [key: string]: never; }>;


export type SettingsProfileQuery = { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null };

export type SharedQueryVariables = Exact<{ [key: string]: never; }>;


export type SharedQuery = { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null };

export type SharedLayout_QueryFragment = { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } } | null };

export type SharedLayout_UserFragment = { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string, readonly avatarUrl: string | null, readonly isAdmin: boolean, readonly isVerified: boolean, readonly organizationMemberships: { readonly __typename?: 'OrganizationMembershipsConnection', readonly nodes: ReadonlyArray<{ readonly __typename?: 'OrganizationMembership', readonly id: any, readonly isOwner: boolean, readonly isBillingContact: boolean, readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly name: string, readonly slug: string } | null }> } };

export type TransferOrganizationBillingContactMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
  userId: Scalars['UUID']['input'];
}>;


export type TransferOrganizationBillingContactMutation = { readonly __typename?: 'Mutation', readonly transferOrganizationBillingContact: { readonly __typename?: 'TransferOrganizationBillingContactPayload', readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly currentUserIsBillingContact: boolean | null } | null } | null };

export type TransferOrganizationOwnershipMutationVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
  userId: Scalars['UUID']['input'];
}>;


export type TransferOrganizationOwnershipMutation = { readonly __typename?: 'Mutation', readonly transferOrganizationOwnership: { readonly __typename?: 'TransferOrganizationOwnershipPayload', readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly currentUserIsOwner: boolean | null } | null } | null };

export type UnlinkUserAuthenticationMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type UnlinkUserAuthenticationMutation = { readonly __typename?: 'Mutation', readonly deleteUserAuthentication: { readonly __typename?: 'DeleteUserAuthenticationPayload', readonly user: { readonly __typename?: 'User', readonly id: any, readonly userAuthenticationsList: ReadonlyArray<{ readonly __typename?: 'UserAuthentication', readonly id: any, readonly identifier: string, readonly service: string, readonly createdAt: string }> } | null } | null };

export type UpdateOrganizationMutationVariables = Exact<{
  input: UpdateOrganizationInput;
}>;


export type UpdateOrganizationMutation = { readonly __typename?: 'Mutation', readonly updateOrganization: { readonly __typename?: 'UpdateOrganizationPayload', readonly organization: { readonly __typename?: 'Organization', readonly id: any, readonly slug: string, readonly name: string } | null } | null };

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  patch: UserPatch;
}>;


export type UpdateUserMutation = { readonly __typename?: 'Mutation', readonly updateUser: { readonly __typename?: 'UpdateUserPayload', readonly clientMutationId: string | null, readonly user: { readonly __typename?: 'User', readonly id: any, readonly name: string | null, readonly username: string } | null } | null };

export type VerifyEmailMutationVariables = Exact<{
  id: Scalars['UUID']['input'];
  token: Scalars['String']['input'];
}>;


export type VerifyEmailMutation = { readonly __typename?: 'Mutation', readonly verifyEmail: { readonly __typename?: 'VerifyEmailPayload', readonly success: boolean | null, readonly query: { readonly __typename?: 'Query', readonly currentUser: { readonly __typename?: 'User', readonly id: any, readonly isVerified: boolean } | null } | null } | null };

export type WithTypename<T extends { __typename?: any }> = Partial<T> & { __typename: NonNullable<T['__typename']> };

export type GraphCacheKeysConfig = {
  AcceptInvitationToOrganizationPayload?: (data: WithTypename<AcceptInvitationToOrganizationPayload>) => null | string,
  ChangePasswordPayload?: (data: WithTypename<ChangePasswordPayload>) => null | string,
  ConfirmAccountDeletionPayload?: (data: WithTypename<ConfirmAccountDeletionPayload>) => null | string,
  CreateOrganizationPayload?: (data: WithTypename<CreateOrganizationPayload>) => null | string,
  CreateUserEmailPayload?: (data: WithTypename<CreateUserEmailPayload>) => null | string,
  DeleteOrganizationPayload?: (data: WithTypename<DeleteOrganizationPayload>) => null | string,
  DeleteUserAuthenticationPayload?: (data: WithTypename<DeleteUserAuthenticationPayload>) => null | string,
  DeleteUserEmailPayload?: (data: WithTypename<DeleteUserEmailPayload>) => null | string,
  ForgotPasswordPayload?: (data: WithTypename<ForgotPasswordPayload>) => null | string,
  InviteToOrganizationPayload?: (data: WithTypename<InviteToOrganizationPayload>) => null | string,
  LoginPayload?: (data: WithTypename<LoginPayload>) => null | string,
  LogoutPayload?: (data: WithTypename<LogoutPayload>) => null | string,
  MakeEmailPrimaryPayload?: (data: WithTypename<MakeEmailPrimaryPayload>) => null | string,
  Organization?: (data: WithTypename<Organization>) => null | string,
  OrganizationMembership?: (data: WithTypename<OrganizationMembership>) => null | string,
  OrganizationMembershipsConnection?: (data: WithTypename<OrganizationMembershipsConnection>) => null | string,
  OrganizationMembershipsEdge?: (data: WithTypename<OrganizationMembershipsEdge>) => null | string,
  OrganizationsConnection?: (data: WithTypename<OrganizationsConnection>) => null | string,
  OrganizationsEdge?: (data: WithTypename<OrganizationsEdge>) => null | string,
  PageInfo?: (data: WithTypename<PageInfo>) => null | string,
  RegisterPayload?: (data: WithTypename<RegisterPayload>) => null | string,
  RemoveFromOrganizationPayload?: (data: WithTypename<RemoveFromOrganizationPayload>) => null | string,
  RequestAccountDeletionPayload?: (data: WithTypename<RequestAccountDeletionPayload>) => null | string,
  ResendEmailVerificationCodePayload?: (data: WithTypename<ResendEmailVerificationCodePayload>) => null | string,
  ResetPasswordPayload?: (data: WithTypename<ResetPasswordPayload>) => null | string,
  TransferOrganizationBillingContactPayload?: (data: WithTypename<TransferOrganizationBillingContactPayload>) => null | string,
  TransferOrganizationOwnershipPayload?: (data: WithTypename<TransferOrganizationOwnershipPayload>) => null | string,
  UpdateOrganizationPayload?: (data: WithTypename<UpdateOrganizationPayload>) => null | string,
  UpdateUserPayload?: (data: WithTypename<UpdateUserPayload>) => null | string,
  User?: (data: WithTypename<User>) => null | string,
  UserAuthentication?: (data: WithTypename<UserAuthentication>) => null | string,
  UserEmail?: (data: WithTypename<UserEmail>) => null | string,
  UserEmailsConnection?: (data: WithTypename<UserEmailsConnection>) => null | string,
  UserEmailsEdge?: (data: WithTypename<UserEmailsEdge>) => null | string,
  UserSubscriptionPayload?: (data: WithTypename<UserSubscriptionPayload>) => null | string,
  UsersEdge?: (data: WithTypename<UsersEdge>) => null | string,
  VerifyEmailPayload?: (data: WithTypename<VerifyEmailPayload>) => null | string
}

export type GraphCacheResolvers = {
  Query?: {
    currentUser?: GraphCacheResolver<WithTypename<Query>, Record<string, never>, WithTypename<User> | string>,
    organization?: GraphCacheResolver<WithTypename<Query>, QueryOrganizationArgs, WithTypename<Organization> | string>,
    organizationBySlug?: GraphCacheResolver<WithTypename<Query>, QueryOrganizationBySlugArgs, WithTypename<Organization> | string>,
    organizationForInvitation?: GraphCacheResolver<WithTypename<Query>, QueryOrganizationForInvitationArgs, WithTypename<Organization> | string>,
    organizationMembership?: GraphCacheResolver<WithTypename<Query>, QueryOrganizationMembershipArgs, WithTypename<OrganizationMembership> | string>,
    organizations?: GraphCacheResolver<WithTypename<Query>, QueryOrganizationsArgs, WithTypename<OrganizationsConnection> | string>,
    user?: GraphCacheResolver<WithTypename<Query>, QueryUserArgs, WithTypename<User> | string>,
    userAuthentication?: GraphCacheResolver<WithTypename<Query>, QueryUserAuthenticationArgs, WithTypename<UserAuthentication> | string>,
    userByUsername?: GraphCacheResolver<WithTypename<Query>, QueryUserByUsernameArgs, WithTypename<User> | string>,
    userEmail?: GraphCacheResolver<WithTypename<Query>, QueryUserEmailArgs, WithTypename<UserEmail> | string>
  },
  AcceptInvitationToOrganizationPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<AcceptInvitationToOrganizationPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<AcceptInvitationToOrganizationPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  ChangePasswordPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<ChangePasswordPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<ChangePasswordPayload>, Record<string, never>, WithTypename<Query> | string>,
    success?: GraphCacheResolver<WithTypename<ChangePasswordPayload>, Record<string, never>, Scalars['Boolean'] | string>
  },
  ConfirmAccountDeletionPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<ConfirmAccountDeletionPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<ConfirmAccountDeletionPayload>, Record<string, never>, WithTypename<Query> | string>,
    success?: GraphCacheResolver<WithTypename<ConfirmAccountDeletionPayload>, Record<string, never>, Scalars['Boolean'] | string>
  },
  CreateOrganizationPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<CreateOrganizationPayload>, Record<string, never>, Scalars['String'] | string>,
    organization?: GraphCacheResolver<WithTypename<CreateOrganizationPayload>, Record<string, never>, WithTypename<Organization> | string>,
    organizationEdge?: GraphCacheResolver<WithTypename<CreateOrganizationPayload>, CreateOrganizationPayloadOrganizationEdgeArgs, WithTypename<OrganizationsEdge> | string>,
    query?: GraphCacheResolver<WithTypename<CreateOrganizationPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  CreateUserEmailPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<CreateUserEmailPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<CreateUserEmailPayload>, Record<string, never>, WithTypename<Query> | string>,
    user?: GraphCacheResolver<WithTypename<CreateUserEmailPayload>, Record<string, never>, WithTypename<User> | string>,
    userEmail?: GraphCacheResolver<WithTypename<CreateUserEmailPayload>, Record<string, never>, WithTypename<UserEmail> | string>,
    userEmailEdge?: GraphCacheResolver<WithTypename<CreateUserEmailPayload>, CreateUserEmailPayloadUserEmailEdgeArgs, WithTypename<UserEmailsEdge> | string>
  },
  DeleteOrganizationPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<DeleteOrganizationPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<DeleteOrganizationPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  DeleteUserAuthenticationPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<DeleteUserAuthenticationPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<DeleteUserAuthenticationPayload>, Record<string, never>, WithTypename<Query> | string>,
    user?: GraphCacheResolver<WithTypename<DeleteUserAuthenticationPayload>, Record<string, never>, WithTypename<User> | string>,
    userAuthentication?: GraphCacheResolver<WithTypename<DeleteUserAuthenticationPayload>, Record<string, never>, WithTypename<UserAuthentication> | string>
  },
  DeleteUserEmailPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<DeleteUserEmailPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<DeleteUserEmailPayload>, Record<string, never>, WithTypename<Query> | string>,
    user?: GraphCacheResolver<WithTypename<DeleteUserEmailPayload>, Record<string, never>, WithTypename<User> | string>,
    userEmail?: GraphCacheResolver<WithTypename<DeleteUserEmailPayload>, Record<string, never>, WithTypename<UserEmail> | string>,
    userEmailEdge?: GraphCacheResolver<WithTypename<DeleteUserEmailPayload>, DeleteUserEmailPayloadUserEmailEdgeArgs, WithTypename<UserEmailsEdge> | string>
  },
  ForgotPasswordPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<ForgotPasswordPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<ForgotPasswordPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  InviteToOrganizationPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<InviteToOrganizationPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<InviteToOrganizationPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  LoginPayload?: {
    user?: GraphCacheResolver<WithTypename<LoginPayload>, Record<string, never>, WithTypename<User> | string>
  },
  LogoutPayload?: {
    success?: GraphCacheResolver<WithTypename<LogoutPayload>, Record<string, never>, Scalars['Boolean'] | string>
  },
  MakeEmailPrimaryPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<MakeEmailPrimaryPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<MakeEmailPrimaryPayload>, Record<string, never>, WithTypename<Query> | string>,
    user?: GraphCacheResolver<WithTypename<MakeEmailPrimaryPayload>, Record<string, never>, WithTypename<User> | string>,
    userEmail?: GraphCacheResolver<WithTypename<MakeEmailPrimaryPayload>, Record<string, never>, WithTypename<UserEmail> | string>,
    userEmailEdge?: GraphCacheResolver<WithTypename<MakeEmailPrimaryPayload>, MakeEmailPrimaryPayloadUserEmailEdgeArgs, WithTypename<UserEmailsEdge> | string>
  },
  Organization?: {
    createdAt?: GraphCacheResolver<WithTypename<Organization>, Record<string, never>, Scalars['Datetime'] | string>,
    currentUserIsBillingContact?: GraphCacheResolver<WithTypename<Organization>, Record<string, never>, Scalars['Boolean'] | string>,
    currentUserIsOwner?: GraphCacheResolver<WithTypename<Organization>, Record<string, never>, Scalars['Boolean'] | string>,
    id?: GraphCacheResolver<WithTypename<Organization>, Record<string, never>, Scalars['UUID'] | string>,
    name?: GraphCacheResolver<WithTypename<Organization>, Record<string, never>, Scalars['String'] | string>,
    organizationMemberships?: GraphCacheResolver<WithTypename<Organization>, OrganizationOrganizationMembershipsArgs, WithTypename<OrganizationMembershipsConnection> | string>,
    slug?: GraphCacheResolver<WithTypename<Organization>, Record<string, never>, Scalars['String'] | string>
  },
  OrganizationMembership?: {
    createdAt?: GraphCacheResolver<WithTypename<OrganizationMembership>, Record<string, never>, Scalars['Datetime'] | string>,
    id?: GraphCacheResolver<WithTypename<OrganizationMembership>, Record<string, never>, Scalars['UUID'] | string>,
    isBillingContact?: GraphCacheResolver<WithTypename<OrganizationMembership>, Record<string, never>, Scalars['Boolean'] | string>,
    isOwner?: GraphCacheResolver<WithTypename<OrganizationMembership>, Record<string, never>, Scalars['Boolean'] | string>,
    organization?: GraphCacheResolver<WithTypename<OrganizationMembership>, Record<string, never>, WithTypename<Organization> | string>,
    organizationId?: GraphCacheResolver<WithTypename<OrganizationMembership>, Record<string, never>, Scalars['UUID'] | string>,
    user?: GraphCacheResolver<WithTypename<OrganizationMembership>, Record<string, never>, WithTypename<User> | string>,
    userId?: GraphCacheResolver<WithTypename<OrganizationMembership>, Record<string, never>, Scalars['UUID'] | string>
  },
  OrganizationMembershipsConnection?: {
    edges?: GraphCacheResolver<WithTypename<OrganizationMembershipsConnection>, Record<string, never>, Array<WithTypename<OrganizationMembershipsEdge> | string>>,
    nodes?: GraphCacheResolver<WithTypename<OrganizationMembershipsConnection>, Record<string, never>, Array<WithTypename<OrganizationMembership> | string>>,
    pageInfo?: GraphCacheResolver<WithTypename<OrganizationMembershipsConnection>, Record<string, never>, WithTypename<PageInfo> | string>,
    totalCount?: GraphCacheResolver<WithTypename<OrganizationMembershipsConnection>, Record<string, never>, Scalars['Int'] | string>
  },
  OrganizationMembershipsEdge?: {
    cursor?: GraphCacheResolver<WithTypename<OrganizationMembershipsEdge>, Record<string, never>, Scalars['Cursor'] | string>,
    node?: GraphCacheResolver<WithTypename<OrganizationMembershipsEdge>, Record<string, never>, WithTypename<OrganizationMembership> | string>
  },
  OrganizationsConnection?: {
    edges?: GraphCacheResolver<WithTypename<OrganizationsConnection>, Record<string, never>, Array<WithTypename<OrganizationsEdge> | string>>,
    nodes?: GraphCacheResolver<WithTypename<OrganizationsConnection>, Record<string, never>, Array<WithTypename<Organization> | string>>,
    pageInfo?: GraphCacheResolver<WithTypename<OrganizationsConnection>, Record<string, never>, WithTypename<PageInfo> | string>,
    totalCount?: GraphCacheResolver<WithTypename<OrganizationsConnection>, Record<string, never>, Scalars['Int'] | string>
  },
  OrganizationsEdge?: {
    cursor?: GraphCacheResolver<WithTypename<OrganizationsEdge>, Record<string, never>, Scalars['Cursor'] | string>,
    node?: GraphCacheResolver<WithTypename<OrganizationsEdge>, Record<string, never>, WithTypename<Organization> | string>
  },
  PageInfo?: {
    endCursor?: GraphCacheResolver<WithTypename<PageInfo>, Record<string, never>, Scalars['Cursor'] | string>,
    hasNextPage?: GraphCacheResolver<WithTypename<PageInfo>, Record<string, never>, Scalars['Boolean'] | string>,
    hasPreviousPage?: GraphCacheResolver<WithTypename<PageInfo>, Record<string, never>, Scalars['Boolean'] | string>,
    startCursor?: GraphCacheResolver<WithTypename<PageInfo>, Record<string, never>, Scalars['Cursor'] | string>
  },
  RegisterPayload?: {
    user?: GraphCacheResolver<WithTypename<RegisterPayload>, Record<string, never>, WithTypename<User> | string>
  },
  RemoveFromOrganizationPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<RemoveFromOrganizationPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<RemoveFromOrganizationPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  RequestAccountDeletionPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<RequestAccountDeletionPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<RequestAccountDeletionPayload>, Record<string, never>, WithTypename<Query> | string>,
    success?: GraphCacheResolver<WithTypename<RequestAccountDeletionPayload>, Record<string, never>, Scalars['Boolean'] | string>
  },
  ResendEmailVerificationCodePayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<ResendEmailVerificationCodePayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<ResendEmailVerificationCodePayload>, Record<string, never>, WithTypename<Query> | string>,
    success?: GraphCacheResolver<WithTypename<ResendEmailVerificationCodePayload>, Record<string, never>, Scalars['Boolean'] | string>
  },
  ResetPasswordPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<ResetPasswordPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<ResetPasswordPayload>, Record<string, never>, WithTypename<Query> | string>,
    success?: GraphCacheResolver<WithTypename<ResetPasswordPayload>, Record<string, never>, Scalars['Boolean'] | string>
  },
  TransferOrganizationBillingContactPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<TransferOrganizationBillingContactPayload>, Record<string, never>, Scalars['String'] | string>,
    organization?: GraphCacheResolver<WithTypename<TransferOrganizationBillingContactPayload>, Record<string, never>, WithTypename<Organization> | string>,
    organizationEdge?: GraphCacheResolver<WithTypename<TransferOrganizationBillingContactPayload>, TransferOrganizationBillingContactPayloadOrganizationEdgeArgs, WithTypename<OrganizationsEdge> | string>,
    query?: GraphCacheResolver<WithTypename<TransferOrganizationBillingContactPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  TransferOrganizationOwnershipPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<TransferOrganizationOwnershipPayload>, Record<string, never>, Scalars['String'] | string>,
    organization?: GraphCacheResolver<WithTypename<TransferOrganizationOwnershipPayload>, Record<string, never>, WithTypename<Organization> | string>,
    organizationEdge?: GraphCacheResolver<WithTypename<TransferOrganizationOwnershipPayload>, TransferOrganizationOwnershipPayloadOrganizationEdgeArgs, WithTypename<OrganizationsEdge> | string>,
    query?: GraphCacheResolver<WithTypename<TransferOrganizationOwnershipPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  UpdateOrganizationPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<UpdateOrganizationPayload>, Record<string, never>, Scalars['String'] | string>,
    organization?: GraphCacheResolver<WithTypename<UpdateOrganizationPayload>, Record<string, never>, WithTypename<Organization> | string>,
    organizationEdge?: GraphCacheResolver<WithTypename<UpdateOrganizationPayload>, UpdateOrganizationPayloadOrganizationEdgeArgs, WithTypename<OrganizationsEdge> | string>,
    query?: GraphCacheResolver<WithTypename<UpdateOrganizationPayload>, Record<string, never>, WithTypename<Query> | string>
  },
  UpdateUserPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<UpdateUserPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<UpdateUserPayload>, Record<string, never>, WithTypename<Query> | string>,
    user?: GraphCacheResolver<WithTypename<UpdateUserPayload>, Record<string, never>, WithTypename<User> | string>,
    userEdge?: GraphCacheResolver<WithTypename<UpdateUserPayload>, UpdateUserPayloadUserEdgeArgs, WithTypename<UsersEdge> | string>
  },
  User?: {
    avatarUrl?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>,
    createdAt?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['Datetime'] | string>,
    footest?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>,
    hasPassword?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['Boolean'] | string>,
    id?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['UUID'] | string>,
    isAdmin?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['Boolean'] | string>,
    isVerified?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['Boolean'] | string>,
    name?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>,
    organizationMemberships?: GraphCacheResolver<WithTypename<User>, UserOrganizationMembershipsArgs, WithTypename<OrganizationMembershipsConnection> | string>,
    updatedAt?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['Datetime'] | string>,
    userAuthenticationsList?: GraphCacheResolver<WithTypename<User>, UserUserAuthenticationsListArgs, Array<WithTypename<UserAuthentication> | string>>,
    userEmails?: GraphCacheResolver<WithTypename<User>, UserUserEmailsArgs, WithTypename<UserEmailsConnection> | string>,
    username?: GraphCacheResolver<WithTypename<User>, Record<string, never>, Scalars['String'] | string>
  },
  UserAuthentication?: {
    createdAt?: GraphCacheResolver<WithTypename<UserAuthentication>, Record<string, never>, Scalars['Datetime'] | string>,
    id?: GraphCacheResolver<WithTypename<UserAuthentication>, Record<string, never>, Scalars['UUID'] | string>,
    identifier?: GraphCacheResolver<WithTypename<UserAuthentication>, Record<string, never>, Scalars['String'] | string>,
    service?: GraphCacheResolver<WithTypename<UserAuthentication>, Record<string, never>, Scalars['String'] | string>,
    updatedAt?: GraphCacheResolver<WithTypename<UserAuthentication>, Record<string, never>, Scalars['Datetime'] | string>,
    user?: GraphCacheResolver<WithTypename<UserAuthentication>, Record<string, never>, WithTypename<User> | string>,
    userId?: GraphCacheResolver<WithTypename<UserAuthentication>, Record<string, never>, Scalars['UUID'] | string>
  },
  UserEmail?: {
    createdAt?: GraphCacheResolver<WithTypename<UserEmail>, Record<string, never>, Scalars['Datetime'] | string>,
    email?: GraphCacheResolver<WithTypename<UserEmail>, Record<string, never>, Scalars['String'] | string>,
    id?: GraphCacheResolver<WithTypename<UserEmail>, Record<string, never>, Scalars['UUID'] | string>,
    isPrimary?: GraphCacheResolver<WithTypename<UserEmail>, Record<string, never>, Scalars['Boolean'] | string>,
    isVerified?: GraphCacheResolver<WithTypename<UserEmail>, Record<string, never>, Scalars['Boolean'] | string>,
    updatedAt?: GraphCacheResolver<WithTypename<UserEmail>, Record<string, never>, Scalars['Datetime'] | string>,
    user?: GraphCacheResolver<WithTypename<UserEmail>, Record<string, never>, WithTypename<User> | string>,
    userId?: GraphCacheResolver<WithTypename<UserEmail>, Record<string, never>, Scalars['UUID'] | string>
  },
  UserEmailsConnection?: {
    edges?: GraphCacheResolver<WithTypename<UserEmailsConnection>, Record<string, never>, Array<WithTypename<UserEmailsEdge> | string>>,
    nodes?: GraphCacheResolver<WithTypename<UserEmailsConnection>, Record<string, never>, Array<WithTypename<UserEmail> | string>>,
    pageInfo?: GraphCacheResolver<WithTypename<UserEmailsConnection>, Record<string, never>, WithTypename<PageInfo> | string>,
    totalCount?: GraphCacheResolver<WithTypename<UserEmailsConnection>, Record<string, never>, Scalars['Int'] | string>
  },
  UserEmailsEdge?: {
    cursor?: GraphCacheResolver<WithTypename<UserEmailsEdge>, Record<string, never>, Scalars['Cursor'] | string>,
    node?: GraphCacheResolver<WithTypename<UserEmailsEdge>, Record<string, never>, WithTypename<UserEmail> | string>
  },
  UserSubscriptionPayload?: {
    event?: GraphCacheResolver<WithTypename<UserSubscriptionPayload>, Record<string, never>, Scalars['String'] | string>,
    user?: GraphCacheResolver<WithTypename<UserSubscriptionPayload>, Record<string, never>, WithTypename<User> | string>
  },
  UsersEdge?: {
    cursor?: GraphCacheResolver<WithTypename<UsersEdge>, Record<string, never>, Scalars['Cursor'] | string>,
    node?: GraphCacheResolver<WithTypename<UsersEdge>, Record<string, never>, WithTypename<User> | string>
  },
  VerifyEmailPayload?: {
    clientMutationId?: GraphCacheResolver<WithTypename<VerifyEmailPayload>, Record<string, never>, Scalars['String'] | string>,
    query?: GraphCacheResolver<WithTypename<VerifyEmailPayload>, Record<string, never>, WithTypename<Query> | string>,
    success?: GraphCacheResolver<WithTypename<VerifyEmailPayload>, Record<string, never>, Scalars['Boolean'] | string>
  }
};

export type GraphCacheOptimisticUpdaters = {
  acceptInvitationToOrganization?: GraphCacheOptimisticMutationResolver<MutationAcceptInvitationToOrganizationArgs, Maybe<WithTypename<AcceptInvitationToOrganizationPayload>>>,
  changePassword?: GraphCacheOptimisticMutationResolver<MutationChangePasswordArgs, Maybe<WithTypename<ChangePasswordPayload>>>,
  confirmAccountDeletion?: GraphCacheOptimisticMutationResolver<MutationConfirmAccountDeletionArgs, Maybe<WithTypename<ConfirmAccountDeletionPayload>>>,
  createOrganization?: GraphCacheOptimisticMutationResolver<MutationCreateOrganizationArgs, Maybe<WithTypename<CreateOrganizationPayload>>>,
  createUserEmail?: GraphCacheOptimisticMutationResolver<MutationCreateUserEmailArgs, Maybe<WithTypename<CreateUserEmailPayload>>>,
  deleteOrganization?: GraphCacheOptimisticMutationResolver<MutationDeleteOrganizationArgs, Maybe<WithTypename<DeleteOrganizationPayload>>>,
  deleteUserAuthentication?: GraphCacheOptimisticMutationResolver<MutationDeleteUserAuthenticationArgs, Maybe<WithTypename<DeleteUserAuthenticationPayload>>>,
  deleteUserEmail?: GraphCacheOptimisticMutationResolver<MutationDeleteUserEmailArgs, Maybe<WithTypename<DeleteUserEmailPayload>>>,
  forgotPassword?: GraphCacheOptimisticMutationResolver<MutationForgotPasswordArgs, Maybe<WithTypename<ForgotPasswordPayload>>>,
  inviteToOrganization?: GraphCacheOptimisticMutationResolver<MutationInviteToOrganizationArgs, Maybe<WithTypename<InviteToOrganizationPayload>>>,
  login?: GraphCacheOptimisticMutationResolver<MutationLoginArgs, Maybe<WithTypename<LoginPayload>>>,
  logout?: GraphCacheOptimisticMutationResolver<Record<string, never>, Maybe<WithTypename<LogoutPayload>>>,
  makeEmailPrimary?: GraphCacheOptimisticMutationResolver<MutationMakeEmailPrimaryArgs, Maybe<WithTypename<MakeEmailPrimaryPayload>>>,
  register?: GraphCacheOptimisticMutationResolver<MutationRegisterArgs, Maybe<WithTypename<RegisterPayload>>>,
  removeFromOrganization?: GraphCacheOptimisticMutationResolver<MutationRemoveFromOrganizationArgs, Maybe<WithTypename<RemoveFromOrganizationPayload>>>,
  requestAccountDeletion?: GraphCacheOptimisticMutationResolver<MutationRequestAccountDeletionArgs, Maybe<WithTypename<RequestAccountDeletionPayload>>>,
  resendEmailVerificationCode?: GraphCacheOptimisticMutationResolver<MutationResendEmailVerificationCodeArgs, Maybe<WithTypename<ResendEmailVerificationCodePayload>>>,
  resetPassword?: GraphCacheOptimisticMutationResolver<MutationResetPasswordArgs, Maybe<WithTypename<ResetPasswordPayload>>>,
  transferOrganizationBillingContact?: GraphCacheOptimisticMutationResolver<MutationTransferOrganizationBillingContactArgs, Maybe<WithTypename<TransferOrganizationBillingContactPayload>>>,
  transferOrganizationOwnership?: GraphCacheOptimisticMutationResolver<MutationTransferOrganizationOwnershipArgs, Maybe<WithTypename<TransferOrganizationOwnershipPayload>>>,
  updateOrganization?: GraphCacheOptimisticMutationResolver<MutationUpdateOrganizationArgs, Maybe<WithTypename<UpdateOrganizationPayload>>>,
  updateUser?: GraphCacheOptimisticMutationResolver<MutationUpdateUserArgs, Maybe<WithTypename<UpdateUserPayload>>>,
  verifyEmail?: GraphCacheOptimisticMutationResolver<MutationVerifyEmailArgs, Maybe<WithTypename<VerifyEmailPayload>>>
};

export type GraphCacheUpdaters = {
  Query?: {
    currentUser?: GraphCacheUpdateResolver<{ currentUser: Maybe<WithTypename<User>> }, Record<string, never>>,
    organization?: GraphCacheUpdateResolver<{ organization: Maybe<WithTypename<Organization>> }, QueryOrganizationArgs>,
    organizationBySlug?: GraphCacheUpdateResolver<{ organizationBySlug: Maybe<WithTypename<Organization>> }, QueryOrganizationBySlugArgs>,
    organizationForInvitation?: GraphCacheUpdateResolver<{ organizationForInvitation: Maybe<WithTypename<Organization>> }, QueryOrganizationForInvitationArgs>,
    organizationMembership?: GraphCacheUpdateResolver<{ organizationMembership: Maybe<WithTypename<OrganizationMembership>> }, QueryOrganizationMembershipArgs>,
    organizations?: GraphCacheUpdateResolver<{ organizations: Maybe<WithTypename<OrganizationsConnection>> }, QueryOrganizationsArgs>,
    user?: GraphCacheUpdateResolver<{ user: Maybe<WithTypename<User>> }, QueryUserArgs>,
    userAuthentication?: GraphCacheUpdateResolver<{ userAuthentication: Maybe<WithTypename<UserAuthentication>> }, QueryUserAuthenticationArgs>,
    userByUsername?: GraphCacheUpdateResolver<{ userByUsername: Maybe<WithTypename<User>> }, QueryUserByUsernameArgs>,
    userEmail?: GraphCacheUpdateResolver<{ userEmail: Maybe<WithTypename<UserEmail>> }, QueryUserEmailArgs>
  },
  Mutation?: {
    acceptInvitationToOrganization?: GraphCacheUpdateResolver<{ acceptInvitationToOrganization: Maybe<WithTypename<AcceptInvitationToOrganizationPayload>> }, MutationAcceptInvitationToOrganizationArgs>,
    changePassword?: GraphCacheUpdateResolver<{ changePassword: Maybe<WithTypename<ChangePasswordPayload>> }, MutationChangePasswordArgs>,
    confirmAccountDeletion?: GraphCacheUpdateResolver<{ confirmAccountDeletion: Maybe<WithTypename<ConfirmAccountDeletionPayload>> }, MutationConfirmAccountDeletionArgs>,
    createOrganization?: GraphCacheUpdateResolver<{ createOrganization: Maybe<WithTypename<CreateOrganizationPayload>> }, MutationCreateOrganizationArgs>,
    createUserEmail?: GraphCacheUpdateResolver<{ createUserEmail: Maybe<WithTypename<CreateUserEmailPayload>> }, MutationCreateUserEmailArgs>,
    deleteOrganization?: GraphCacheUpdateResolver<{ deleteOrganization: Maybe<WithTypename<DeleteOrganizationPayload>> }, MutationDeleteOrganizationArgs>,
    deleteUserAuthentication?: GraphCacheUpdateResolver<{ deleteUserAuthentication: Maybe<WithTypename<DeleteUserAuthenticationPayload>> }, MutationDeleteUserAuthenticationArgs>,
    deleteUserEmail?: GraphCacheUpdateResolver<{ deleteUserEmail: Maybe<WithTypename<DeleteUserEmailPayload>> }, MutationDeleteUserEmailArgs>,
    forgotPassword?: GraphCacheUpdateResolver<{ forgotPassword: Maybe<WithTypename<ForgotPasswordPayload>> }, MutationForgotPasswordArgs>,
    inviteToOrganization?: GraphCacheUpdateResolver<{ inviteToOrganization: Maybe<WithTypename<InviteToOrganizationPayload>> }, MutationInviteToOrganizationArgs>,
    login?: GraphCacheUpdateResolver<{ login: Maybe<WithTypename<LoginPayload>> }, MutationLoginArgs>,
    logout?: GraphCacheUpdateResolver<{ logout: Maybe<WithTypename<LogoutPayload>> }, Record<string, never>>,
    makeEmailPrimary?: GraphCacheUpdateResolver<{ makeEmailPrimary: Maybe<WithTypename<MakeEmailPrimaryPayload>> }, MutationMakeEmailPrimaryArgs>,
    register?: GraphCacheUpdateResolver<{ register: Maybe<WithTypename<RegisterPayload>> }, MutationRegisterArgs>,
    removeFromOrganization?: GraphCacheUpdateResolver<{ removeFromOrganization: Maybe<WithTypename<RemoveFromOrganizationPayload>> }, MutationRemoveFromOrganizationArgs>,
    requestAccountDeletion?: GraphCacheUpdateResolver<{ requestAccountDeletion: Maybe<WithTypename<RequestAccountDeletionPayload>> }, MutationRequestAccountDeletionArgs>,
    resendEmailVerificationCode?: GraphCacheUpdateResolver<{ resendEmailVerificationCode: Maybe<WithTypename<ResendEmailVerificationCodePayload>> }, MutationResendEmailVerificationCodeArgs>,
    resetPassword?: GraphCacheUpdateResolver<{ resetPassword: Maybe<WithTypename<ResetPasswordPayload>> }, MutationResetPasswordArgs>,
    transferOrganizationBillingContact?: GraphCacheUpdateResolver<{ transferOrganizationBillingContact: Maybe<WithTypename<TransferOrganizationBillingContactPayload>> }, MutationTransferOrganizationBillingContactArgs>,
    transferOrganizationOwnership?: GraphCacheUpdateResolver<{ transferOrganizationOwnership: Maybe<WithTypename<TransferOrganizationOwnershipPayload>> }, MutationTransferOrganizationOwnershipArgs>,
    updateOrganization?: GraphCacheUpdateResolver<{ updateOrganization: Maybe<WithTypename<UpdateOrganizationPayload>> }, MutationUpdateOrganizationArgs>,
    updateUser?: GraphCacheUpdateResolver<{ updateUser: Maybe<WithTypename<UpdateUserPayload>> }, MutationUpdateUserArgs>,
    verifyEmail?: GraphCacheUpdateResolver<{ verifyEmail: Maybe<WithTypename<VerifyEmailPayload>> }, MutationVerifyEmailArgs>
  },
  Subscription?: {
    currentUserUpdated?: GraphCacheUpdateResolver<{ currentUserUpdated: Maybe<WithTypename<UserSubscriptionPayload>> }, Record<string, never>>
  },
  AcceptInvitationToOrganizationPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<AcceptInvitationToOrganizationPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<AcceptInvitationToOrganizationPayload>>, Record<string, never>>
  },
  ChangePasswordPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<ChangePasswordPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<ChangePasswordPayload>>, Record<string, never>>,
    success?: GraphCacheUpdateResolver<Maybe<WithTypename<ChangePasswordPayload>>, Record<string, never>>
  },
  ConfirmAccountDeletionPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<ConfirmAccountDeletionPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<ConfirmAccountDeletionPayload>>, Record<string, never>>,
    success?: GraphCacheUpdateResolver<Maybe<WithTypename<ConfirmAccountDeletionPayload>>, Record<string, never>>
  },
  CreateOrganizationPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateOrganizationPayload>>, Record<string, never>>,
    organization?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateOrganizationPayload>>, Record<string, never>>,
    organizationEdge?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateOrganizationPayload>>, CreateOrganizationPayloadOrganizationEdgeArgs>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateOrganizationPayload>>, Record<string, never>>
  },
  CreateUserEmailPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateUserEmailPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateUserEmailPayload>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateUserEmailPayload>>, Record<string, never>>,
    userEmail?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateUserEmailPayload>>, Record<string, never>>,
    userEmailEdge?: GraphCacheUpdateResolver<Maybe<WithTypename<CreateUserEmailPayload>>, CreateUserEmailPayloadUserEmailEdgeArgs>
  },
  DeleteOrganizationPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteOrganizationPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteOrganizationPayload>>, Record<string, never>>
  },
  DeleteUserAuthenticationPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserAuthenticationPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserAuthenticationPayload>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserAuthenticationPayload>>, Record<string, never>>,
    userAuthentication?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserAuthenticationPayload>>, Record<string, never>>
  },
  DeleteUserEmailPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserEmailPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserEmailPayload>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserEmailPayload>>, Record<string, never>>,
    userEmail?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserEmailPayload>>, Record<string, never>>,
    userEmailEdge?: GraphCacheUpdateResolver<Maybe<WithTypename<DeleteUserEmailPayload>>, DeleteUserEmailPayloadUserEmailEdgeArgs>
  },
  ForgotPasswordPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<ForgotPasswordPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<ForgotPasswordPayload>>, Record<string, never>>
  },
  InviteToOrganizationPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<InviteToOrganizationPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<InviteToOrganizationPayload>>, Record<string, never>>
  },
  LoginPayload?: {
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<LoginPayload>>, Record<string, never>>
  },
  LogoutPayload?: {
    success?: GraphCacheUpdateResolver<Maybe<WithTypename<LogoutPayload>>, Record<string, never>>
  },
  MakeEmailPrimaryPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<MakeEmailPrimaryPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<MakeEmailPrimaryPayload>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<MakeEmailPrimaryPayload>>, Record<string, never>>,
    userEmail?: GraphCacheUpdateResolver<Maybe<WithTypename<MakeEmailPrimaryPayload>>, Record<string, never>>,
    userEmailEdge?: GraphCacheUpdateResolver<Maybe<WithTypename<MakeEmailPrimaryPayload>>, MakeEmailPrimaryPayloadUserEmailEdgeArgs>
  },
  Organization?: {
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<Organization>>, Record<string, never>>,
    currentUserIsBillingContact?: GraphCacheUpdateResolver<Maybe<WithTypename<Organization>>, Record<string, never>>,
    currentUserIsOwner?: GraphCacheUpdateResolver<Maybe<WithTypename<Organization>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<Organization>>, Record<string, never>>,
    name?: GraphCacheUpdateResolver<Maybe<WithTypename<Organization>>, Record<string, never>>,
    organizationMemberships?: GraphCacheUpdateResolver<Maybe<WithTypename<Organization>>, OrganizationOrganizationMembershipsArgs>,
    slug?: GraphCacheUpdateResolver<Maybe<WithTypename<Organization>>, Record<string, never>>
  },
  OrganizationMembership?: {
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembership>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembership>>, Record<string, never>>,
    isBillingContact?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembership>>, Record<string, never>>,
    isOwner?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembership>>, Record<string, never>>,
    organization?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembership>>, Record<string, never>>,
    organizationId?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembership>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembership>>, Record<string, never>>,
    userId?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembership>>, Record<string, never>>
  },
  OrganizationMembershipsConnection?: {
    edges?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembershipsConnection>>, Record<string, never>>,
    nodes?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembershipsConnection>>, Record<string, never>>,
    pageInfo?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembershipsConnection>>, Record<string, never>>,
    totalCount?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembershipsConnection>>, Record<string, never>>
  },
  OrganizationMembershipsEdge?: {
    cursor?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembershipsEdge>>, Record<string, never>>,
    node?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationMembershipsEdge>>, Record<string, never>>
  },
  OrganizationsConnection?: {
    edges?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationsConnection>>, Record<string, never>>,
    nodes?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationsConnection>>, Record<string, never>>,
    pageInfo?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationsConnection>>, Record<string, never>>,
    totalCount?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationsConnection>>, Record<string, never>>
  },
  OrganizationsEdge?: {
    cursor?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationsEdge>>, Record<string, never>>,
    node?: GraphCacheUpdateResolver<Maybe<WithTypename<OrganizationsEdge>>, Record<string, never>>
  },
  PageInfo?: {
    endCursor?: GraphCacheUpdateResolver<Maybe<WithTypename<PageInfo>>, Record<string, never>>,
    hasNextPage?: GraphCacheUpdateResolver<Maybe<WithTypename<PageInfo>>, Record<string, never>>,
    hasPreviousPage?: GraphCacheUpdateResolver<Maybe<WithTypename<PageInfo>>, Record<string, never>>,
    startCursor?: GraphCacheUpdateResolver<Maybe<WithTypename<PageInfo>>, Record<string, never>>
  },
  RegisterPayload?: {
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<RegisterPayload>>, Record<string, never>>
  },
  RemoveFromOrganizationPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<RemoveFromOrganizationPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<RemoveFromOrganizationPayload>>, Record<string, never>>
  },
  RequestAccountDeletionPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<RequestAccountDeletionPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<RequestAccountDeletionPayload>>, Record<string, never>>,
    success?: GraphCacheUpdateResolver<Maybe<WithTypename<RequestAccountDeletionPayload>>, Record<string, never>>
  },
  ResendEmailVerificationCodePayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<ResendEmailVerificationCodePayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<ResendEmailVerificationCodePayload>>, Record<string, never>>,
    success?: GraphCacheUpdateResolver<Maybe<WithTypename<ResendEmailVerificationCodePayload>>, Record<string, never>>
  },
  ResetPasswordPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<ResetPasswordPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<ResetPasswordPayload>>, Record<string, never>>,
    success?: GraphCacheUpdateResolver<Maybe<WithTypename<ResetPasswordPayload>>, Record<string, never>>
  },
  TransferOrganizationBillingContactPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<TransferOrganizationBillingContactPayload>>, Record<string, never>>,
    organization?: GraphCacheUpdateResolver<Maybe<WithTypename<TransferOrganizationBillingContactPayload>>, Record<string, never>>,
    organizationEdge?: GraphCacheUpdateResolver<Maybe<WithTypename<TransferOrganizationBillingContactPayload>>, TransferOrganizationBillingContactPayloadOrganizationEdgeArgs>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<TransferOrganizationBillingContactPayload>>, Record<string, never>>
  },
  TransferOrganizationOwnershipPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<TransferOrganizationOwnershipPayload>>, Record<string, never>>,
    organization?: GraphCacheUpdateResolver<Maybe<WithTypename<TransferOrganizationOwnershipPayload>>, Record<string, never>>,
    organizationEdge?: GraphCacheUpdateResolver<Maybe<WithTypename<TransferOrganizationOwnershipPayload>>, TransferOrganizationOwnershipPayloadOrganizationEdgeArgs>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<TransferOrganizationOwnershipPayload>>, Record<string, never>>
  },
  UpdateOrganizationPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateOrganizationPayload>>, Record<string, never>>,
    organization?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateOrganizationPayload>>, Record<string, never>>,
    organizationEdge?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateOrganizationPayload>>, UpdateOrganizationPayloadOrganizationEdgeArgs>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateOrganizationPayload>>, Record<string, never>>
  },
  UpdateUserPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateUserPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateUserPayload>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateUserPayload>>, Record<string, never>>,
    userEdge?: GraphCacheUpdateResolver<Maybe<WithTypename<UpdateUserPayload>>, UpdateUserPayloadUserEdgeArgs>
  },
  User?: {
    avatarUrl?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    footest?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    hasPassword?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    isAdmin?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    isVerified?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    name?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    organizationMemberships?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, UserOrganizationMembershipsArgs>,
    updatedAt?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>,
    userAuthenticationsList?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, UserUserAuthenticationsListArgs>,
    userEmails?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, UserUserEmailsArgs>,
    username?: GraphCacheUpdateResolver<Maybe<WithTypename<User>>, Record<string, never>>
  },
  UserAuthentication?: {
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<UserAuthentication>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<UserAuthentication>>, Record<string, never>>,
    identifier?: GraphCacheUpdateResolver<Maybe<WithTypename<UserAuthentication>>, Record<string, never>>,
    service?: GraphCacheUpdateResolver<Maybe<WithTypename<UserAuthentication>>, Record<string, never>>,
    updatedAt?: GraphCacheUpdateResolver<Maybe<WithTypename<UserAuthentication>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<UserAuthentication>>, Record<string, never>>,
    userId?: GraphCacheUpdateResolver<Maybe<WithTypename<UserAuthentication>>, Record<string, never>>
  },
  UserEmail?: {
    createdAt?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmail>>, Record<string, never>>,
    email?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmail>>, Record<string, never>>,
    id?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmail>>, Record<string, never>>,
    isPrimary?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmail>>, Record<string, never>>,
    isVerified?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmail>>, Record<string, never>>,
    updatedAt?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmail>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmail>>, Record<string, never>>,
    userId?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmail>>, Record<string, never>>
  },
  UserEmailsConnection?: {
    edges?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmailsConnection>>, Record<string, never>>,
    nodes?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmailsConnection>>, Record<string, never>>,
    pageInfo?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmailsConnection>>, Record<string, never>>,
    totalCount?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmailsConnection>>, Record<string, never>>
  },
  UserEmailsEdge?: {
    cursor?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmailsEdge>>, Record<string, never>>,
    node?: GraphCacheUpdateResolver<Maybe<WithTypename<UserEmailsEdge>>, Record<string, never>>
  },
  UserSubscriptionPayload?: {
    event?: GraphCacheUpdateResolver<Maybe<WithTypename<UserSubscriptionPayload>>, Record<string, never>>,
    user?: GraphCacheUpdateResolver<Maybe<WithTypename<UserSubscriptionPayload>>, Record<string, never>>
  },
  UsersEdge?: {
    cursor?: GraphCacheUpdateResolver<Maybe<WithTypename<UsersEdge>>, Record<string, never>>,
    node?: GraphCacheUpdateResolver<Maybe<WithTypename<UsersEdge>>, Record<string, never>>
  },
  VerifyEmailPayload?: {
    clientMutationId?: GraphCacheUpdateResolver<Maybe<WithTypename<VerifyEmailPayload>>, Record<string, never>>,
    query?: GraphCacheUpdateResolver<Maybe<WithTypename<VerifyEmailPayload>>, Record<string, never>>,
    success?: GraphCacheUpdateResolver<Maybe<WithTypename<VerifyEmailPayload>>, Record<string, never>>
  },
};

export type GraphCacheConfig = Parameters<typeof cacheExchange>[0] & {
  updates?: GraphCacheUpdaters,
  keys?: GraphCacheKeysConfig,
  optimistic?: GraphCacheOptimisticUpdaters,
  resolvers?: GraphCacheResolvers,
};
export const CreatedOrganizationFragmentDoc = gql`
    fragment CreatedOrganization on Organization {
  id
  name
  slug
}
    `;
export const EmailsForm_UserEmailFragmentDoc = gql`
    fragment EmailsForm_UserEmail on UserEmail {
  id
  email
  isVerified
  isPrimary
  createdAt
}
    `;
export const EmailsForm_UserFragmentDoc = gql`
    fragment EmailsForm_User on User {
  id
  userEmails(first: 50) {
    nodes {
      ...EmailsForm_UserEmail
      id
      email
      isVerified
    }
  }
}
    `;
export const OrganizationPage_OrganizationFragmentDoc = gql`
    fragment OrganizationPage_Organization on Organization {
  id
  name
  slug
  currentUserIsOwner
  currentUserIsBillingContact
}
    `;
export const OrganizationMembers_MembershipFragmentDoc = gql`
    fragment OrganizationMembers_Membership on OrganizationMembership {
  id
  createdAt
  isOwner
  isBillingContact
  user {
    id
    username
    name
  }
}
    `;
export const OrganizationMembers_OrganizationFragmentDoc = gql`
    fragment OrganizationMembers_Organization on Organization {
  id
  ...OrganizationPage_Organization
  name
  slug
  organizationMemberships(first: 10, offset: $offset, orderBy: [MEMBER_NAME_ASC]) {
    nodes {
      id
      ...OrganizationMembers_Membership
    }
    totalCount
  }
}
    `;
export const SharedLayout_UserFragmentDoc = gql`
    fragment SharedLayout_User on User {
  id
  name
  username
  avatarUrl
  isAdmin
  isVerified
  organizationMemberships(first: 20) {
    nodes {
      id
      isOwner
      isBillingContact
      organization {
        id
        name
        slug
      }
    }
  }
}
    `;
export const SharedLayout_QueryFragmentDoc = gql`
    fragment SharedLayout_Query on Query {
  currentUser {
    id
    ...SharedLayout_User
  }
}
    `;
export const OrganizationPage_QueryFragmentDoc = gql`
    fragment OrganizationPage_Query on Query {
  ...SharedLayout_Query
  organizationBySlug(slug: $slug) {
    id
    ...OrganizationPage_Organization
  }
}
    `;
export const ProfileSettingsForm_UserFragmentDoc = gql`
    fragment ProfileSettingsForm_User on User {
  id
  name
  username
  avatarUrl
}
    `;
export const AcceptOrganizationInviteDocument = gql`
    mutation AcceptOrganizationInvite($id: UUID!, $code: String) {
  acceptInvitationToOrganization(input: {invitationId: $id, code: $code}) {
    clientMutationId
  }
}
    `;

export function useAcceptOrganizationInviteMutation() {
  return Urql.useMutation<AcceptOrganizationInviteMutation, AcceptOrganizationInviteMutationVariables>(AcceptOrganizationInviteDocument);
};
export const AddEmailDocument = gql`
    mutation AddEmail($email: String!) {
  createUserEmail(input: {userEmail: {email: $email}}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          ...EmailsForm_UserEmail
        }
      }
    }
  }
}
    ${EmailsForm_UserEmailFragmentDoc}`;

export function useAddEmailMutation() {
  return Urql.useMutation<AddEmailMutation, AddEmailMutationVariables>(AddEmailDocument);
};
export const ChangePasswordDocument = gql`
    mutation ChangePassword($oldPassword: String!, $newPassword: String!) {
  changePassword(input: {oldPassword: $oldPassword, newPassword: $newPassword}) {
    success
  }
}
    `;

export function useChangePasswordMutation() {
  return Urql.useMutation<ChangePasswordMutation, ChangePasswordMutationVariables>(ChangePasswordDocument);
};
export const ConfirmAccountDeletionDocument = gql`
    mutation ConfirmAccountDeletion($token: String!) {
  confirmAccountDeletion(input: {token: $token}) {
    success
  }
}
    `;

export function useConfirmAccountDeletionMutation() {
  return Urql.useMutation<ConfirmAccountDeletionMutation, ConfirmAccountDeletionMutationVariables>(ConfirmAccountDeletionDocument);
};
export const CreateOrganizationDocument = gql`
    mutation CreateOrganization($name: String!, $slug: String!) {
  createOrganization(input: {name: $name, slug: $slug}) {
    organization {
      id
      ...CreatedOrganization
    }
    query {
      organizationBySlug(slug: $slug) {
        id
        ...CreatedOrganization
      }
    }
  }
}
    ${CreatedOrganizationFragmentDoc}`;

export function useCreateOrganizationMutation() {
  return Urql.useMutation<CreateOrganizationMutation, CreateOrganizationMutationVariables>(CreateOrganizationDocument);
};
export const CurrentUserAuthenticationsDocument = gql`
    query CurrentUserAuthentications {
  currentUser {
    id
    authentications: userAuthenticationsList(first: 50) {
      id
      service
      identifier
      createdAt
    }
  }
}
    `;

export function useCurrentUserAuthenticationsQuery(options?: Omit<Urql.UseQueryArgs<never, CurrentUserAuthenticationsQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<CurrentUserAuthenticationsQuery, CurrentUserAuthenticationsQueryVariables | undefined>({ query: CurrentUserAuthenticationsDocument, variables: undefined, ...options });
};
export const CurrentUserUpdatedDocument = gql`
    subscription CurrentUserUpdated {
  currentUserUpdated {
    event
    user {
      id
      username
      name
      avatarUrl
      isAdmin
      isVerified
    }
  }
}
    `;

export function useCurrentUserUpdatedSubscription<R = CurrentUserUpdatedSubscription>(options?: Omit<Urql.UseSubscriptionArgs<never, CurrentUserUpdatedSubscriptionVariables | undefined>, 'query'>, handler?: Urql.SubscriptionHandlerArg<CurrentUserUpdatedSubscription, R>) {
  return Urql.useSubscription<CurrentUserUpdatedSubscription, R, CurrentUserUpdatedSubscriptionVariables | undefined>({ query: CurrentUserUpdatedDocument, variables: undefined, ...options }, handler);
};
export const DeleteEmailDocument = gql`
    mutation DeleteEmail($emailId: UUID!) {
  deleteUserEmail(input: {id: $emailId}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          ...EmailsForm_UserEmail
        }
      }
    }
  }
}
    ${EmailsForm_UserEmailFragmentDoc}`;

export function useDeleteEmailMutation() {
  return Urql.useMutation<DeleteEmailMutation, DeleteEmailMutationVariables>(DeleteEmailDocument);
};
export const DeleteOrganizationDocument = gql`
    mutation DeleteOrganization($organizationId: UUID!) {
  deleteOrganization(input: {organizationId: $organizationId}) {
    clientMutationId
  }
}
    `;

export function useDeleteOrganizationMutation() {
  return Urql.useMutation<DeleteOrganizationMutation, DeleteOrganizationMutationVariables>(DeleteOrganizationDocument);
};
export const ForgotPasswordDocument = gql`
    mutation ForgotPassword($email: String!) {
  forgotPassword(input: {email: $email}) {
    clientMutationId
  }
}
    `;

export function useForgotPasswordMutation() {
  return Urql.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument);
};
export const InvitationDetailDocument = gql`
    query InvitationDetail($id: UUID!, $code: String) {
  ...SharedLayout_Query
  organizationForInvitation(invitationId: $id, code: $code) {
    id
    name
    slug
  }
}
    ${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}`;

export function useInvitationDetailQuery(options?: Omit<Urql.UseQueryArgs<never, InvitationDetailQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<InvitationDetailQuery, InvitationDetailQueryVariables | undefined>({ query: InvitationDetailDocument, variables: undefined, ...options });
};
export const InviteToOrganizationDocument = gql`
    mutation InviteToOrganization($organizationId: UUID!, $email: String, $username: String) {
  inviteToOrganization(
    input: {organizationId: $organizationId, email: $email, username: $username}
  ) {
    clientMutationId
  }
}
    `;

export function useInviteToOrganizationMutation() {
  return Urql.useMutation<InviteToOrganizationMutation, InviteToOrganizationMutationVariables>(InviteToOrganizationDocument);
};
export const LoginDocument = gql`
    mutation Login($username: String!, $password: String!) {
  login(input: {username: $username, password: $password}) {
    user {
      id
      username
      name
    }
  }
}
    `;

export function useLoginMutation() {
  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);
};
export const LogoutDocument = gql`
    mutation Logout {
  logout {
    success
  }
}
    `;

export function useLogoutMutation() {
  return Urql.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument);
};
export const MakeEmailPrimaryDocument = gql`
    mutation MakeEmailPrimary($emailId: UUID!) {
  makeEmailPrimary(input: {emailId: $emailId}) {
    user {
      id
      userEmails(first: 50) {
        nodes {
          id
          isPrimary
        }
      }
    }
  }
}
    `;

export function useMakeEmailPrimaryMutation() {
  return Urql.useMutation<MakeEmailPrimaryMutation, MakeEmailPrimaryMutationVariables>(MakeEmailPrimaryDocument);
};
export const OrganizationBySlugDocument = gql`
    query OrganizationBySlug($slug: String!) {
  organizationBySlug(slug: $slug) {
    id
    name
    slug
  }
}
    `;

export function useOrganizationBySlugQuery(options?: Omit<Urql.UseQueryArgs<never, OrganizationBySlugQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<OrganizationBySlugQuery, OrganizationBySlugQueryVariables | undefined>({ query: OrganizationBySlugDocument, variables: undefined, ...options });
};
export const OrganizationMembersDocument = gql`
    query OrganizationMembers($slug: String!, $offset: Int = 0) {
  ...OrganizationPage_Query
  organizationBySlug(slug: $slug) {
    id
    ...OrganizationMembers_Organization
  }
}
    ${OrganizationPage_QueryFragmentDoc}
${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}
${OrganizationPage_OrganizationFragmentDoc}
${OrganizationMembers_OrganizationFragmentDoc}
${OrganizationMembers_MembershipFragmentDoc}`;

export function useOrganizationMembersQuery(options?: Omit<Urql.UseQueryArgs<never, OrganizationMembersQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<OrganizationMembersQuery, OrganizationMembersQueryVariables | undefined>({ query: OrganizationMembersDocument, variables: undefined, ...options });
};
export const OrganizationPageDocument = gql`
    query OrganizationPage($slug: String!) {
  ...OrganizationPage_Query
}
    ${OrganizationPage_QueryFragmentDoc}
${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}
${OrganizationPage_OrganizationFragmentDoc}`;

export function useOrganizationPageQuery(options?: Omit<Urql.UseQueryArgs<never, OrganizationPageQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<OrganizationPageQuery, OrganizationPageQueryVariables | undefined>({ query: OrganizationPageDocument, variables: undefined, ...options });
};
export const RegisterDocument = gql`
    mutation Register($username: String!, $password: String!, $email: String!, $name: String) {
  register(
    input: {username: $username, password: $password, email: $email, name: $name}
  ) {
    user {
      id
      username
      name
    }
  }
}
    `;

export function useRegisterMutation() {
  return Urql.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument);
};
export const RemoveFromOrganizationDocument = gql`
    mutation RemoveFromOrganization($organizationId: UUID!, $userId: UUID!) {
  removeFromOrganization(
    input: {organizationId: $organizationId, userId: $userId}
  ) {
    clientMutationId
  }
}
    `;

export function useRemoveFromOrganizationMutation() {
  return Urql.useMutation<RemoveFromOrganizationMutation, RemoveFromOrganizationMutationVariables>(RemoveFromOrganizationDocument);
};
export const RequestAccountDeletionDocument = gql`
    mutation RequestAccountDeletion {
  requestAccountDeletion(input: {}) {
    success
  }
}
    `;

export function useRequestAccountDeletionMutation() {
  return Urql.useMutation<RequestAccountDeletionMutation, RequestAccountDeletionMutationVariables>(RequestAccountDeletionDocument);
};
export const ResendEmailVerificationDocument = gql`
    mutation ResendEmailVerification($emailId: UUID!) {
  resendEmailVerificationCode(input: {emailId: $emailId}) {
    success
  }
}
    `;

export function useResendEmailVerificationMutation() {
  return Urql.useMutation<ResendEmailVerificationMutation, ResendEmailVerificationMutationVariables>(ResendEmailVerificationDocument);
};
export const ResetPasswordDocument = gql`
    mutation ResetPassword($userId: UUID!, $token: String!, $password: String!) {
  resetPassword(
    input: {userId: $userId, resetToken: $token, newPassword: $password}
  ) {
    success
  }
}
    `;

export function useResetPasswordMutation() {
  return Urql.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument);
};
export const SettingsEmailsDocument = gql`
    query SettingsEmails {
  ...SharedLayout_Query
  currentUser {
    id
    isVerified
    ...EmailsForm_User
  }
}
    ${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}
${EmailsForm_UserFragmentDoc}
${EmailsForm_UserEmailFragmentDoc}`;

export function useSettingsEmailsQuery(options?: Omit<Urql.UseQueryArgs<never, SettingsEmailsQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<SettingsEmailsQuery, SettingsEmailsQueryVariables | undefined>({ query: SettingsEmailsDocument, variables: undefined, ...options });
};
export const SettingsPasswordDocument = gql`
    query SettingsPassword {
  currentUser {
    id
    hasPassword
    userEmails(first: 1, condition: {isPrimary: true}) {
      nodes {
        id
        email
      }
    }
  }
}
    `;

export function useSettingsPasswordQuery(options?: Omit<Urql.UseQueryArgs<never, SettingsPasswordQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<SettingsPasswordQuery, SettingsPasswordQueryVariables | undefined>({ query: SettingsPasswordDocument, variables: undefined, ...options });
};
export const SettingsProfileDocument = gql`
    query SettingsProfile {
  ...SharedLayout_Query
  currentUser {
    id
    ...ProfileSettingsForm_User
  }
}
    ${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}
${ProfileSettingsForm_UserFragmentDoc}`;

export function useSettingsProfileQuery(options?: Omit<Urql.UseQueryArgs<never, SettingsProfileQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<SettingsProfileQuery, SettingsProfileQueryVariables | undefined>({ query: SettingsProfileDocument, variables: undefined, ...options });
};
export const SharedDocument = gql`
    query Shared {
  ...SharedLayout_Query
}
    ${SharedLayout_QueryFragmentDoc}
${SharedLayout_UserFragmentDoc}`;

export function useSharedQuery(options?: Omit<Urql.UseQueryArgs<never, SharedQueryVariables | undefined>, 'query'>) {
  return Urql.useQuery<SharedQuery, SharedQueryVariables | undefined>({ query: SharedDocument, variables: undefined, ...options });
};
export const TransferOrganizationBillingContactDocument = gql`
    mutation TransferOrganizationBillingContact($organizationId: UUID!, $userId: UUID!) {
  transferOrganizationBillingContact(
    input: {organizationId: $organizationId, userId: $userId}
  ) {
    organization {
      id
      currentUserIsBillingContact
    }
  }
}
    `;

export function useTransferOrganizationBillingContactMutation() {
  return Urql.useMutation<TransferOrganizationBillingContactMutation, TransferOrganizationBillingContactMutationVariables>(TransferOrganizationBillingContactDocument);
};
export const TransferOrganizationOwnershipDocument = gql`
    mutation TransferOrganizationOwnership($organizationId: UUID!, $userId: UUID!) {
  transferOrganizationOwnership(
    input: {organizationId: $organizationId, userId: $userId}
  ) {
    organization {
      id
      currentUserIsOwner
    }
  }
}
    `;

export function useTransferOrganizationOwnershipMutation() {
  return Urql.useMutation<TransferOrganizationOwnershipMutation, TransferOrganizationOwnershipMutationVariables>(TransferOrganizationOwnershipDocument);
};
export const UnlinkUserAuthenticationDocument = gql`
    mutation UnlinkUserAuthentication($id: UUID!) {
  deleteUserAuthentication(input: {id: $id}) {
    user {
      id
      userAuthenticationsList(first: 50) {
        id
        identifier
        service
        createdAt
      }
    }
  }
}
    `;

export function useUnlinkUserAuthenticationMutation() {
  return Urql.useMutation<UnlinkUserAuthenticationMutation, UnlinkUserAuthenticationMutationVariables>(UnlinkUserAuthenticationDocument);
};
export const UpdateOrganizationDocument = gql`
    mutation UpdateOrganization($input: UpdateOrganizationInput!) {
  updateOrganization(input: $input) {
    organization {
      id
      slug
      name
    }
  }
}
    `;

export function useUpdateOrganizationMutation() {
  return Urql.useMutation<UpdateOrganizationMutation, UpdateOrganizationMutationVariables>(UpdateOrganizationDocument);
};
export const UpdateUserDocument = gql`
    mutation UpdateUser($id: UUID!, $patch: UserPatch!) {
  updateUser(input: {id: $id, patch: $patch}) {
    clientMutationId
    user {
      id
      name
      username
    }
  }
}
    `;

export function useUpdateUserMutation() {
  return Urql.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument);
};
export const VerifyEmailDocument = gql`
    mutation VerifyEmail($id: UUID!, $token: String!) {
  verifyEmail(input: {userEmailId: $id, token: $token}) {
    success
    query {
      currentUser {
        id
        isVerified
      }
    }
  }
}
    `;

export function useVerifyEmailMutation() {
  return Urql.useMutation<VerifyEmailMutation, VerifyEmailMutationVariables>(VerifyEmailDocument);
};